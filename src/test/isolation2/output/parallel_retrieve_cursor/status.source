-- @Description Tests the status for pg_endpoints AND GP_ENDPOINTS_STATUS_INFO()
--
DROP TABLE IF EXISTS t1;
DROP
CREATE TABLE t1 (a INT) DISTRIBUTED by (a);
CREATE
insert into t1 select generate_series(1,100);
INSERT 100

--------- Test1: Basic test for parallel retrieve interface & close cursor
1: BEGIN;
BEGIN
1: DECLARE c1 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
DECLARE
1: @out_sh 'parse_endpoint 1 1 2 3 4' : SELECT endpointname,token,hostname,port,status FROM gp_endpoints_info(true) WHERE cursorname='c1';
 endpoint_id1_1 | token_id | host_id | port_id | READY
 endpoint_id1_2 | token_id | host_id | port_id | READY
 endpoint_id1_3 | token_id | host_id | port_id | READY
(3 rows)
1&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c1');  <waiting ...>

*R: @in_sh 'sub_endpoint_name @ENDPOINT1': SELECT status FROM GP_ENDPOINTS_STATUS_INFO() WHERE endpointname='@ENDPOINT1';
#-1retrieve> FATAL:  Retrieve auth token is invalid


 status 
--------
 READY  
(1 row)

 status 
--------
 READY  
(1 row)

 status 
--------
 READY  
(1 row)
*R: @in_sh 'sub_endpoint_name @ENDPOINT1': RETRIEVE ALL FROM ENDPOINT "@ENDPOINT1";
#-1retrieve> FATAL:  Retrieve auth token is invalid


 a  
----
 2  
 3  
 4  
 7  
 8  
 16 
 18 
 19 
 22 
 24 
 27 
 29 
 34 
 37 
 39 
 41 
 42 
 45 
 51 
 53 
 54 
 55 
 59 
 60 
 65 
 66 
 70 
 75 
 77 
 80 
 81 
 84 
 90 
 92 
 93 
 94 
 97 
 99 
(38 rows)

 a  
----
 1  
 12 
 15 
 20 
 23 
 26 
 30 
 31 
 35 
 36 
 38 
 40 
 44 
 46 
 47 
 48 
 49 
 50 
 57 
 61 
 64 
 68 
 69 
 71 
 72 
 74 
 76 
 78 
 79 
 83 
 86 
 87 
 88 
 89 
 91 
 95 
 98 
(37 rows)

 a   
-----
 5   
 6   
 9   
 10  
 11  
 13  
 14  
 17  
 21  
 25  
 28  
 32  
 33  
 43  
 52  
 56  
 58  
 62  
 63  
 67  
 73  
 82  
 85  
 96  
 100 
(25 rows)

1<:  <... completed>
 finished 
----------
 t        
(1 row)
1: CLOSE c1;
CLOSE
-- check no endpoint info
1: SELECT token,status FROM gp_endpoints_info(true) WHERE cursorname='c1';
 token | status 
-------+--------
(0 rows)
-- check no token info on QE after close PARALLEL RETRIEVE CURSOR
*R: @in_sh 'sub @TOKEN1 ${TOKEN1}': SELECT * FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='@TOKEN1';
#-1retrieve> FATAL:  Retrieve auth token is invalid


 token | databaseid | senderpid | receiverpid | status | dbid | sessionid | userid | endpointname | cursorname 
-------+------------+-----------+-------------+--------+------+-----------+--------+--------------+------------
(0 rows)

 token | databaseid | senderpid | receiverpid | status | dbid | sessionid | userid | endpointname | cursorname 
-------+------------+-----------+-------------+--------+------+-----------+--------+--------------+------------
(0 rows)

 token | databaseid | senderpid | receiverpid | status | dbid | sessionid | userid | endpointname | cursorname 
-------+------------+-----------+-------------+--------+------+-----------+--------+--------------+------------
(0 rows)

-- error out for closed cursor
1: SELECT * FROM gp_check_parallel_retrieve_cursor('c1');
ERROR:  cursor "c1" does not exist
1: ROLLBACK;
ROLLBACK

---------- Test2: enhanced test for parallel retrieve interface status & cursor auto closed when transaction closed
1: BEGIN;
BEGIN
1: DECLARE c2 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
DECLARE
1: @out_sh 'parse_endpoint 2 1 2 3 4' : SELECT endpointname,token,hostname,port,status FROM gp_endpoints_info(true) WHERE cursorname='c2';
 endpoint_id2_1 | token_id | host_id | port_id | READY
 endpoint_id2_2 | token_id | host_id | port_id | READY
 endpoint_id2_3 | token_id | host_id | port_id | READY
(3 rows)
-- test RETRIEVE success on seg1
0R: @in_sh 'sub_endpoint_name @ENDPOINT2': RETRIEVE 10 FROM ENDPOINT "@ENDPOINT2";
 a  
----
 16 
 18 
 19 
 2  
 22 
 24 
 3  
 7  
 8  
 4  
(10 rows)
1&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c2');  <waiting ...>

-- check initial status after "CHECK PARALLEL RETRIEVE CURSOR"
2: @in_sh 'sub @TOKEN2 ${TOKEN2}': SELECT status FROM gp_endpoints_info(true) WHERE cursorname='c2' AND token='@TOKEN2';
 status 
--------
 READY  
 READY  
 READY  
(3 rows)
*R: @in_sh 'sub @TOKEN2 ${TOKEN2}': SELECT senderpid<>-1, receiverpid<>-1, status FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='@TOKEN2';
#-1retrieve> FATAL:  Retrieve auth token is invalid


 ?column? | ?column? | status 
----------+----------+--------
 t        | t        | READY  
(1 row)

 ?column? | ?column? | status 
----------+----------+--------
 t        | f        | READY  
(1 row)

 ?column? | ?column? | status 
----------+----------+--------
 t        | f        | READY  
(1 row)
-- check status if some endpoint retrieve partial results, some endpoint finished retrieving, some endpoint not start retrieving
0R: @in_sh 'sub_endpoint_name @ENDPOINT2': RETRIEVE 10 FROM ENDPOINT "@ENDPOINT2";
 a  
----
 27 
 29 
 34 
 37 
 39 
 41 
 42 
 45 
 51 
 53 
(10 rows)
1R: @in_sh 'sub_endpoint_name @ENDPOINT2': RETRIEVE ALL FROM ENDPOINT "@ENDPOINT2";
 a  
----
 1  
 12 
 15 
 20 
 23 
 26 
 30 
 31 
 35 
 36 
 38 
 40 
 44 
 46 
 47 
 48 
 49 
 50 
 57 
 61 
 64 
 68 
 69 
 71 
 72 
 74 
 76 
 78 
 79 
 83 
 86 
 87 
 88 
 89 
 91 
 95 
 98 
(37 rows)
2: @in_sh 'sub @TOKEN2 ${TOKEN2}': SELECT status FROM gp_endpoints_info(true) WHERE cursorname='c2' AND token='@TOKEN2';
 status 
--------
 READY  
 FINISH 
 READY  
(3 rows)
*R: @in_sh 'sub @TOKEN2 ${TOKEN2}': SELECT senderpid<>-1, receiverpid<>-1, status FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='@TOKEN2';
#-1retrieve> FATAL:  Retrieve auth token is invalid


 ?column? | ?column? | status 
----------+----------+--------
 t        | t        | READY  
(1 row)

 ?column? | ?column? | status 
----------+----------+--------
 f        | t        | FINISH 
(1 row)

 ?column? | ?column? | status 
----------+----------+--------
 t        | f        | READY  
(1 row)
-- return 0 row instead of reporting error if finished retrieving data from this endpoint, while other endpoint have not finished retrieving.
1R: @in_sh 'sub_endpoint_name @ENDPOINT2': RETRIEVE ALL FROM ENDPOINT "@ENDPOINT2";
 a 
---
(0 rows)
-- finished retrieving all endpoints and check status
*R: @in_sh 'sub_endpoint_name @ENDPOINT2': RETRIEVE ALL FROM ENDPOINT "@ENDPOINT2";
#-1retrieve> FATAL:  Retrieve auth token is invalid


 a  
----
 54 
 55 
 59 
 60 
 65 
 66 
 70 
 75 
 77 
 80 
 81 
 84 
 90 
 92 
 93 
 94 
 97 
 99 
(18 rows)

 a 
---
(0 rows)

 a   
-----
 5   
 6   
 9   
 10  
 11  
 13  
 14  
 17  
 21  
 25  
 28  
 32  
 33  
 43  
 52  
 56  
 58  
 62  
 63  
 67  
 73  
 82  
 85  
 96  
 100 
(25 rows)
2: @in_sh 'sub @TOKEN2 ${TOKEN2}': SELECT status FROM gp_endpoints_info(true) WHERE cursorname='c2' AND token='@TOKEN2';
 status 
--------
 FINISH 
 FINISH 
 FINISH 
(3 rows)
*R: @in_sh 'sub @TOKEN2 ${TOKEN2}': SELECT senderpid<>-1, receiverpid<>-1, status FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='@TOKEN2';
#-1retrieve> FATAL:  Retrieve auth token is invalid


 ?column? | ?column? | status 
----------+----------+--------
 f        | t        | FINISH 
(1 row)

 ?column? | ?column? | status 
----------+----------+--------
 f        | t        | FINISH 
(1 row)

 ?column? | ?column? | status 
----------+----------+--------
 f        | t        | FINISH 
(1 row)

1<:  <... completed>
 finished 
----------
 t        
(1 row)
1: COMMIT;
COMMIT
-- check the cursor auto closed when transaction closed
-- check no endpoint info
1: @in_sh 'sub @TOKEN2 ${TOKEN2}': SELECT status FROM gp_endpoints_info(true) WHERE cursorname='c2' AND token='@TOKEN2';
 status 
--------
(0 rows)
-- check no token info on QE after close PARALLEL RETRIEVE CURSOR
*R: @in_sh 'sub @TOKEN2 ${TOKEN2}': SELECT * FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='@TOKEN2';
#-1retrieve> FATAL:  Retrieve auth token is invalid


 token | databaseid | senderpid | receiverpid | status | dbid | sessionid | userid | endpointname | cursorname 
-------+------------+-----------+-------------+--------+------+-----------+--------+--------------+------------
(0 rows)

 token | databaseid | senderpid | receiverpid | status | dbid | sessionid | userid | endpointname | cursorname 
-------+------------+-----------+-------------+--------+------+-----------+--------+--------------+------------
(0 rows)

 token | databaseid | senderpid | receiverpid | status | dbid | sessionid | userid | endpointname | cursorname 
-------+------------+-----------+-------------+--------+------+-----------+--------+--------------+------------
(0 rows)

-- error out for closed cursor
1: SELECT * FROM gp_check_parallel_retrieve_cursor('c2');
ERROR:  cursor "c2" does not exist
1: ROLLBACK;
ROLLBACK

---------- Test3: 2 retrieving sessions connect to the same endpoint report error & cancel QE exec backend
1: BEGIN;
BEGIN
1: DECLARE c3 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
DECLARE
1: @out_sh 'parse_endpoint 3 1 2 3 4' : SELECT endpointname,token,hostname,port,status FROM gp_endpoints_info(true) WHERE cursorname='c3';
 endpoint_id3_1 | token_id | host_id | port_id | READY
 endpoint_id3_2 | token_id | host_id | port_id | READY
 endpoint_id3_3 | token_id | host_id | port_id | READY
(3 rows)
1&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c3');  <waiting ...>
0R: @in_sh 'sub_endpoint_name @ENDPOINT3': RETRIEVE 10 FROM ENDPOINT "@ENDPOINT3";
 a  
----
 2  
 3  
 4  
 7  
 8  
 16 
 18 
 19 
 22 
 24 
(10 rows)
-- a new retrieve session should report error
3R: @in_sh 'sub_endpoint_name @ENDPOINT3': RETRIEVE 10 FROM ENDPOINT "@ENDPOINT3";
ERROR:  Endpoint endpoint_id3_1 is already attached by receiver(pid: PID) (cdbendpointretrieve.c:LINENO)
DETAIL:  An endpoint can be attached by only one retrieving session for each 'CHECK PARALLEL RETRIEVE CURSOR'
-- quit this new retrieve session
3Rq: ... <quitting>
-- some endpoint retrieve partial results, some endpoint finished retrieving, some endpoint not start retrieving
1R: @in_sh 'sub_endpoint_name @ENDPOINT3': RETRIEVE ALL FROM ENDPOINT "@ENDPOINT3";
 a  
----
 1  
 12 
 15 
 20 
 23 
 26 
 30 
 31 
 35 
 36 
 38 
 40 
 44 
 46 
 47 
 48 
 49 
 50 
 57 
 61 
 64 
 68 
 69 
 71 
 72 
 74 
 76 
 78 
 79 
 83 
 86 
 87 
 88 
 89 
 91 
 95 
 98 
(37 rows)
-- get senderpid which is endpoint execution backend
0R: @out_sh 'get_cell PID31 3 1 ; sub "$PID31[ \t]*" senderpid31': SELECT senderpid, receiverpid<>-1, status FROM GP_ENDPOINTS_STATUS_INFO();
 senderpid | ?column? | status
-----------+----------+--------
 senderpid31| t        | READY
(1 row)
-- run 'kill -s INT senderpid' to cancel the endpoint execution backend, retrieve session still can work
0R: @in_sh 'kill -s INT ${PID31} && echo "${RAW_STR}" ': SELECT 1;
 ?column? 
----------
 1        
(1 row)
-- check it can cancel the "gp_wait_parallel_retrieve_cursor"
1<:  <... completed>
ERROR:  Endpoint for 'c3' get aborted. (cdbendpoint.c:LINENO)
ERROR:  canceling MPP operation
-- check no endpoint info left
2: @in_sh 'sub @TOKEN3 $TOKEN3': SELECT status FROM gp_endpoints_info(true) WHERE cursorname='c3' AND token='@TOKEN3';
 status 
--------
(0 rows)
*R: @in_sh 'sub @TOKEN3 $TOKEN3': SELECT senderpid<>-1, receiverpid<>-1, status FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='@TOKEN3';
#-1retrieve> FATAL:  Retrieve auth token is invalid


 ?column? | ?column? | status 
----------+----------+--------
(0 rows)

 ?column? | ?column? | status 
----------+----------+--------
(0 rows)

 ?column? | ?column? | status 
----------+----------+--------
(0 rows)
-- report error for EXECUTE canceled PARALLEL RETRIEVE CURSOR
1: SELECT * FROM gp_wait_parallel_retrieve_cursor('c3');
ERROR:  current transaction is aborted, commands ignored until end of transaction block
1: ROLLBACK;
ROLLBACK
-- check no endpoint info
2: @in_sh 'sub @TOKEN3 $TOKEN3': SELECT status FROM gp_endpoints_info(true) WHERE cursorname='c3' AND token='@TOKEN3';
 status 
--------
(0 rows)
*R: @in_sh 'sub @TOKEN3 $TOKEN3': SELECT senderpid<>-1, receiverpid<>-1, status FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='@TOKEN3';
#-1retrieve> FATAL:  Retrieve auth token is invalid


 ?column? | ?column? | status 
----------+----------+--------
(0 rows)

 ?column? | ?column? | status 
----------+----------+--------
(0 rows)

 ?column? | ?column? | status 
----------+----------+--------
(0 rows)

---------- Test4: terminate (using signal QUIT) QE exec backend
1: BEGIN;
BEGIN
1: DECLARE c4 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
DECLARE
1: @out_sh 'parse_endpoint 4 1 2 3 4' : SELECT endpointname,token,hostname,port,status FROM gp_endpoints_info(true) WHERE cursorname='c4';
 endpoint_id4_1 | token_id | host_id | port_id | READY
 endpoint_id4_2 | token_id | host_id | port_id | READY
 endpoint_id4_3 | token_id | host_id | port_id | READY
(3 rows)
1&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c4');  <waiting ...>
-- some endpoint retrieve partial results, some endpoint finished retrieving, some endpoint not start retrieving
0R: @in_sh 'sub_endpoint_name @ENDPOINT4': RETRIEVE 10 FROM ENDPOINT "@ENDPOINT4";
 a  
----
 2  
 3  
 4  
 7  
 8  
 16 
 18 
 19 
 22 
 24 
(10 rows)
1R: @in_sh 'sub_endpoint_name @ENDPOINT4': RETRIEVE ALL FROM ENDPOINT "@ENDPOINT4";
 a  
----
 1  
 12 
 15 
 20 
 23 
 26 
 30 
 31 
 35 
 36 
 38 
 40 
 44 
 46 
 47 
 48 
 49 
 50 
 57 
 61 
 64 
 68 
 69 
 71 
 72 
 74 
 76 
 78 
 79 
 83 
 86 
 87 
 88 
 89 
 91 
 95 
 98 
(37 rows)
-- get senderpid which is endpoint execution backend
0R: @out_sh 'get_cell PID41 3 1 ; sub "${PID41}[ \t]*" senderpid41': SELECT senderpid, receiverpid<>-1, status FROM GP_ENDPOINTS_STATUS_INFO();
 senderpid | ?column? | status
-----------+----------+--------
 senderpid41| t        | READY
(1 row)
-- run 'kill -s QUIT senderpid' to cancel the endpoint execution backend, retrieve session still can work
0R: @in_sh 'kill -s QUIT ${PID41} && echo "${RAW_STR}" ': SELECT 1;
 ?column? 
----------
 1        
(1 row)
-- exit this session because the connection closed, so that it will re-connect next time use this session.
0Rq: ... <quitting>
-- check it can cancel the "gp_wait_parallel_retrieve_cursor"
1<:  <... completed>
ERROR:  Error on receive from seg0 10.34.50.67:25432 pid=12603: server closed the connection unexpectedly
DETAIL:  
	This probably means the server terminated abnormally
	before or while processing the request.
ERROR:  Error on receive from SEG IP:PORT pid=PID: server closed the connection unexpectedly
DETAIL:  
	This probably means the server terminated abnormally
	before or while processing the request.
-- check no endpoint info left
2q: ... <quitting>
2: @in_sh 'sub @TOKEN4 $TOKEN4': SELECT status FROM gp_endpoints_info(true) WHERE cursorname='c4' AND token='@TOKEN4';
 status 
--------
(0 rows)
*R: @in_sh 'sub @TOKEN4 $TOKEN4': SELECT senderpid<>-1, receiverpid<>-1, status FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='@TOKEN4';
#-1retrieve> FATAL:  Retrieve auth token is invalid


#0retrieve> FATAL:  Retrieve auth token is invalid


 ?column? | ?column? | status 
----------+----------+--------
(0 rows)

 ?column? | ?column? | status 
----------+----------+--------
(0 rows)
-- report error for EXECUTE canceled PARALLEL RETRIEVE CURSOR
1: SELECT * FROM gp_wait_parallel_retrieve_cursor('c4');
ERROR:  current transaction is aborted, commands ignored until end of transaction block
1: ROLLBACK;
ROLLBACK
-- check no endpoint info
2: @in_sh 'sub @TOKEN4 $TOKEN4': SELECT status FROM gp_endpoints_info(true) WHERE cursorname='c4' AND token='@TOKEN4';
 status 
--------
(0 rows)
*R: @in_sh 'sub @TOKEN4 $TOKEN4': SELECT senderpid<>-1, receiverpid<>-1, status FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='@TOKEN4';
#-1retrieve> FATAL:  Retrieve auth token is invalid


#0retrieve> FATAL:  Retrieve auth token is invalid


 ?column? | ?column? | status 
----------+----------+--------
(0 rows)

 ?column? | ?column? | status 
----------+----------+--------
(0 rows)
2Rq: ... <quitting>

---------- Test5: terminate (using signal TERM) QE exec backend
1: BEGIN;
BEGIN
1: DECLARE c5 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
DECLARE
1: @out_sh 'parse_endpoint 5 1 2 3 4' : SELECT endpointname,token,hostname,port,status FROM gp_endpoints_info(true) WHERE cursorname='c5';
 endpoint_id5_1 | token_id | host_id | port_id | READY
 endpoint_id5_2 | token_id | host_id | port_id | READY
 endpoint_id5_3 | token_id | host_id | port_id | READY
(3 rows)
1&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c5');  <waiting ...>
-- some endpoint retrieve partial results, some endpoint finished retrieving, some endpoint not start retrieving
0R: @in_sh 'sub_endpoint_name @ENDPOINT5': RETRIEVE 10 FROM ENDPOINT "@ENDPOINT5";
 a  
----
 2  
 3  
 4  
 7  
 8  
 16 
 18 
 19 
 22 
 24 
(10 rows)
-- 1R still bind to Test4 session, so can not retrieve from current endpoint.
1R: @in_sh 'sub_endpoint_name @ENDPOINT5': RETRIEVE ALL FROM ENDPOINT "@ENDPOINT5";
ERROR:  failed to attach non-existing endpoint endpoint_id5_2 (cdbendpointretrieve.c:LINENO)
-- Since seg1 retrieve session is bind to Test4 session. And Test4 session get killed. We need to restart it.
1Rq: ... <quitting>
1R: @in_sh 'sub_endpoint_name @ENDPOINT5': RETRIEVE ALL FROM ENDPOINT "@ENDPOINT5";
 a  
----
 1  
 12 
 15 
 20 
 23 
 26 
 30 
 31 
 35 
 36 
 38 
 40 
 44 
 46 
 47 
 48 
 49 
 50 
 57 
 61 
 64 
 68 
 69 
 71 
 72 
 74 
 76 
 78 
 79 
 83 
 86 
 87 
 88 
 89 
 91 
 95 
 98 
(37 rows)
-- get senderpid which is endpoint execution backend
0R: @out_sh 'get_cell PID51 3 1 ; sub "${PID51}[ \t]*" senderpid51': SELECT senderpid, receiverpid<>-1, status FROM GP_ENDPOINTS_STATUS_INFO();
 senderpid | ?column? | status
-----------+----------+--------
 senderpid51| t        | READY
(1 row)
-- run 'kill -s TERM senderpid' to cancel the endpoint execution backend, retrieve session still can work
0R: @in_sh 'kill -s TERM ${PID51} && echo "${RAW_STR}" ': SELECT 1;
 ?column? 
----------
 1        
(1 row)
-- check it can cancel the "gp_wait_parallel_retrieve_cursor"
1<:  <... completed>
ERROR:  Endpoint for 'c5' get aborted. (cdbendpoint.c:LINENO)
ERROR:  terminating connection due to administrator command  (seg0 10.34.50.67:25432 pid=12905)
-- check no endpoint info left
2: @in_sh 'sub @TOKEN5 $TOKEN5': SELECT status FROM gp_endpoints_info(true) WHERE cursorname='c5' AND token='@TOKEN5';
 status 
--------
(0 rows)
*R: @in_sh 'sub @TOKEN5 $TOKEN5': SELECT senderpid<>-1, receiverpid<>-1, status FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='@TOKEN5';
#-1retrieve> FATAL:  Retrieve auth token is invalid


 ?column? | ?column? | status 
----------+----------+--------
(0 rows)

 ?column? | ?column? | status 
----------+----------+--------
(0 rows)

 ?column? | ?column? | status 
----------+----------+--------
(0 rows)
-- report error for EXECUTE canceled PARALLEL RETRIEVE CURSOR
1: SELECT * FROM gp_wait_parallel_retrieve_cursor('c5');
ERROR:  current transaction is aborted, commands ignored until end of transaction block
1: ROLLBACK;
ROLLBACK
-- check no endpoint info
2: @in_sh 'sub @TOKEN5 $TOKEN5': SELECT status FROM gp_endpoints_info(true) WHERE cursorname='c5' AND token='@TOKEN5';
 status 
--------
(0 rows)
*R: @in_sh 'sub @TOKEN5 $TOKEN5': SELECT senderpid<>-1, receiverpid<>-1, status FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='@TOKEN5';
#-1retrieve> FATAL:  Retrieve auth token is invalid


 ?column? | ?column? | status 
----------+----------+--------
(0 rows)

 ?column? | ?column? | status 
----------+----------+--------
(0 rows)

 ?column? | ?column? | status 
----------+----------+--------
(0 rows)

---------- Test6: Cancel (using signal INT) the process of 'CHECK PARALLEL RETRIEVE CURSOR'
1: BEGIN;
BEGIN
1: DECLARE c6 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
DECLARE
1: @out_sh 'parse_endpoint 6 1 2 3 4' : SELECT endpointname,token,hostname,port,status FROM gp_endpoints_info(true) WHERE cursorname='c6';
 endpoint_id6_1 | token_id | host_id | port_id | READY
 endpoint_id6_2 | token_id | host_id | port_id | READY
 endpoint_id6_3 | token_id | host_id | port_id | READY
(3 rows)
-- get backend pid of this session which run 'gp_wait_parallel_retrieve_cursor'
1: @out_sh 'get_cell PID61 3 1 ; sub "${PID61}[ \t]*" QDPid61': select pg_backend_pid();
 pg_backend_pid
----------------
 QDPid61
(1 row)
1&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c6');  <waiting ...>
-- some endpoint retrieve partial results, some endpoint finished retrieving, some endpoint not start retrieving
0R: @in_sh 'sub_endpoint_name @ENDPOINT6': RETRIEVE 10 FROM ENDPOINT "@ENDPOINT6";
 a  
----
 2  
 3  
 4  
 7  
 8  
 16 
 18 
 19 
 22 
 24 
(10 rows)
1R: @in_sh 'sub_endpoint_name @ENDPOINT6': RETRIEVE ALL FROM ENDPOINT "@ENDPOINT6";
 a  
----
 1  
 12 
 15 
 20 
 23 
 26 
 30 
 31 
 35 
 36 
 38 
 40 
 44 
 46 
 47 
 48 
 49 
 50 
 57 
 61 
 64 
 68 
 69 
 71 
 72 
 74 
 76 
 78 
 79 
 83 
 86 
 87 
 88 
 89 
 91 
 95 
 98 
(37 rows)
-- run 'kill -s INT QDPid' to cancel the endpoint execution backend, retrieve session still can work
0R: @in_sh 'kill -s INT ${PID61} && echo "${RAW_STR}" ': SELECT 1;
 ?column? 
----------
 1        
(1 row)
-- check it can cancel the "gp_wait_parallel_retrieve_cursor"
1<:  <... completed>
ERROR:  canceling statement due to user request
-- check no endpoint info left
2: @in_sh 'sub @TOKEN6 $TOKEN6': SELECT status FROM gp_endpoints_info(true) WHERE cursorname='c6' AND token='@TOKEN6';
 status 
--------
(0 rows)
*R: @in_sh 'sub @TOKEN6 $TOKEN6': SELECT senderpid<>-1, receiverpid<>-1, status FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='@TOKEN6';
#-1retrieve> FATAL:  Retrieve auth token is invalid


 ?column? | ?column? | status 
----------+----------+--------
(0 rows)

 ?column? | ?column? | status 
----------+----------+--------
(0 rows)

 ?column? | ?column? | status 
----------+----------+--------
(0 rows)
-- report error for EXECUTE canceled PARALLEL RETRIEVE CURSOR
1: SELECT * FROM gp_wait_parallel_retrieve_cursor('c6');
ERROR:  current transaction is aborted, commands ignored until end of transaction block
1: ROLLBACK;
ROLLBACK
-- check no endpoint info
2: @in_sh 'sub @TOKEN6 $TOKEN6': SELECT status FROM gp_endpoints_info(true) WHERE cursorname='c6' AND token='@TOKEN6';
 status 
--------
(0 rows)
*R: @in_sh 'sub @TOKEN6 $TOKEN6': SELECT senderpid<>-1, receiverpid<>-1, status FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='@TOKEN6';
#-1retrieve> FATAL:  Retrieve auth token is invalid


 ?column? | ?column? | status 
----------+----------+--------
(0 rows)

 ?column? | ?column? | status 
----------+----------+--------
(0 rows)

 ?column? | ?column? | status 
----------+----------+--------
(0 rows)

---------- Test6.1: Cancel (using signal INT) the process of 'CHECK PARALLEL RETRIEVE CURSOR' without rollback
1: BEGIN;
BEGIN
1: DECLARE c61 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
DECLARE
1: @out_sh 'parse_endpoint 61 1 2 3 4' : SELECT endpointname,token,hostname,port,status FROM gp_endpoints_info(true) WHERE cursorname='c61';
 endpoint_id61_1 | token_id | host_id | port_id | READY
 endpoint_id61_2 | token_id | host_id | port_id | READY
 endpoint_id61_3 | token_id | host_id | port_id | READY
(3 rows)
-- get backend pid of this session which run 'gp_wait_parallel_retrieve_cursor'
1: @out_sh 'get_cell PID611 3 1 ; sub "${PID611}[ \t]*" QDPid611': select pg_backend_pid();
 pg_backend_pid
----------------
 QDPid611
(1 row)
1&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c61');  <waiting ...>
-- some endpoint retrieve partial results, some endpoint finished retrieving, some endpoint not start retrieving
0R: @in_sh 'sub_endpoint_name @ENDPOINT61': RETRIEVE 10 FROM ENDPOINT "@ENDPOINT61";
 a  
----
 2  
 3  
 4  
 7  
 8  
 16 
 18 
 19 
 22 
 24 
(10 rows)
1R: @in_sh 'sub_endpoint_name @ENDPOINT61': RETRIEVE ALL FROM ENDPOINT "@ENDPOINT61";
 a  
----
 1  
 12 
 15 
 20 
 23 
 26 
 30 
 31 
 35 
 36 
 38 
 40 
 44 
 46 
 47 
 48 
 49 
 50 
 57 
 61 
 64 
 68 
 69 
 71 
 72 
 74 
 76 
 78 
 79 
 83 
 86 
 87 
 88 
 89 
 91 
 95 
 98 
(37 rows)
-- run 'kill -s INT QDPid' to cancel the endpoint execution backend, retrieve session still can work
0R: @in_sh 'kill -s INT ${PID611} && echo "${RAW_STR}" ': SELECT 1;
 ?column? 
----------
 1        
(1 row)
-- check it can cancel the "gp_wait_parallel_retrieve_cursor"
1<:  <... completed>
ERROR:  canceling statement due to user request
-- check no endpoint info left
2: @in_sh 'sub @TOKEN61 $TOKEN61': SELECT status FROM gp_endpoints_info(true) WHERE cursorname='c61' AND token='@TOKEN61';
 status 
--------
(0 rows)
*R: @in_sh 'sub @TOKEN61 $TOKEN61': SELECT senderpid<>-1, receiverpid<>-1, status FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='@TOKEN61';
#-1retrieve> FATAL:  Retrieve auth token is invalid


 ?column? | ?column? | status 
----------+----------+--------
(0 rows)

 ?column? | ?column? | status 
----------+----------+--------
(0 rows)

 ?column? | ?column? | status 
----------+----------+--------
(0 rows)
-- quit the session of 'CHECK PARALLEL RETRIEVE CURSOR' and keep other session connected
1q: ... <quitting>
-- check no endpoint info
2: @in_sh 'sub @TOKEN61 $TOKEN61': SELECT status FROM gp_endpoints_info(true) WHERE cursorname='c61' AND token='@TOKEN61';
 status 
--------
(0 rows)
*R: @in_sh 'sub @TOKEN61 $TOKEN61': SELECT senderpid<>-1, receiverpid<>-1, status FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='@TOKEN61';
#-1retrieve> FATAL:  Retrieve auth token is invalid


 ?column? | ?column? | status 
----------+----------+--------
(0 rows)

 ?column? | ?column? | status 
----------+----------+--------
(0 rows)

 ?column? | ?column? | status 
----------+----------+--------
(0 rows)
0Rq: ... <quitting>
1Rq: ... <quitting>
2Rq: ... <quitting>

---------- Test7: terminate (using signal QUIT) the process of 'CHECK PARALLEL RETRIEVE CURSOR'
1: BEGIN;
BEGIN
1: DECLARE c7 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
DECLARE
1: @out_sh 'parse_endpoint 7 1 2 3 4' : SELECT endpointname,token,hostname,port,status FROM gp_endpoints_info(true) WHERE cursorname='c7';
 endpoint_id7_1 | token_id | host_id | port_id | READY
 endpoint_id7_2 | token_id | host_id | port_id | READY
 endpoint_id7_3 | token_id | host_id | port_id | READY
(3 rows)
-- get backend pid of this session which run 'gp_wait_parallel_retrieve_cursor'
1: @out_sh 'get_cell PID71 3 1 ; sub "${PID71}[ \t]*" QDPid71': select pg_backend_pid();
 pg_backend_pid
----------------
 QDPid71
(1 row)
1&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c7');  <waiting ...>
-- some endpoint retrieve partial results, some endpoint finished retrieving, some endpoint not start retrieving
0R: @in_sh 'sub_endpoint_name @ENDPOINT7': RETRIEVE 10 FROM ENDPOINT "@ENDPOINT7";
 a  
----
 2  
 3  
 4  
 7  
 8  
 16 
 18 
 19 
 22 
 24 
(10 rows)
1R: @in_sh 'sub_endpoint_name @ENDPOINT7': RETRIEVE ALL FROM ENDPOINT "@ENDPOINT7";
 a  
----
 1  
 12 
 15 
 20 
 23 
 26 
 30 
 31 
 35 
 36 
 38 
 40 
 44 
 46 
 47 
 48 
 49 
 50 
 57 
 61 
 64 
 68 
 69 
 71 
 72 
 74 
 76 
 78 
 79 
 83 
 86 
 87 
 88 
 89 
 91 
 95 
 98 
(37 rows)
-- run 'kill -s QUIT QDPid' to cancel the endpoint execution backend, retrieve session still can work
-- here need to sleep sometime to wait for endpoint QE backend to detect QD connection lost.
0R: @in_sh 'kill -s QUIT ${PID71}&& sleep 2 && echo "${RAW_STR}" ': SELECT 1;
 ?column? 
----------
 1        
(1 row)
-- check it can cancel the "gp_wait_parallel_retrieve_cursor"
1<:  <... completed>
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
-- quit all sessions on the master, because connect lost
1q: ... <quitting>
2q: ... <quitting>
-1Rq: FAILED:  Sessions not started cannot be quit
-- check no endpoint info left
2: @in_sh 'sub @TOKEN7 $TOKEN7': SELECT status FROM gp_endpoints_info(true) WHERE cursorname='c7' AND token='@TOKEN7';
 status 
--------
(0 rows)
*R: @in_sh 'sub @TOKEN7 $TOKEN7': SELECT senderpid<>-1, receiverpid<>-1, status FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='@TOKEN7';
#-1retrieve> FATAL:  Retrieve auth token is invalid


 ?column? | ?column? | status 
----------+----------+--------
(0 rows)

 ?column? | ?column? | status 
----------+----------+--------
(0 rows)

 ?column? | ?column? | status 
----------+----------+--------
(0 rows)
-- report error for EXECUTE canceled PARALLEL RETRIEVE CURSOR
1: SELECT * FROM gp_wait_parallel_retrieve_cursor('c7');
ERROR:  cursor "c7" does not exist
1: ROLLBACK;
ROLLBACK
-- check no endpoint info
2: @in_sh 'sub @TOKEN7 $TOKEN7': SELECT status FROM gp_endpoints_info(true) WHERE cursorname='c7' AND token='@TOKEN7';
 status 
--------
(0 rows)
*R: @in_sh 'sub @TOKEN7 $TOKEN7': SELECT senderpid<>-1, receiverpid<>-1, status FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='@TOKEN7';
#-1retrieve> FATAL:  Retrieve auth token is invalid


 ?column? | ?column? | status 
----------+----------+--------
(0 rows)

 ?column? | ?column? | status 
----------+----------+--------
(0 rows)

 ?column? | ?column? | status 
----------+----------+--------
(0 rows)

---------- Test8: Status visibilities for different sessions
1: BEGIN;
BEGIN
1: DECLARE c8 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
DECLARE
1: @out_sh 'get_cell SESSION81 3 2 ; get_token_cell TOKEN81 3 1 ; match_sub_tt session81 $SESSION81 > /dev/null ; match_sub token81 $TOKEN81': SELECT token,sessionid,status FROM GP_ENDPOINTS WHERE cursorname='c8';
 token                              | sessionid | status
------------------------------------+-----------+--------
 token81 | session81| READY
 token81 | session81| READY
 token81 | session81| READY
(3 rows)
-- Session 2 can only see its own cursors by default.
2: BEGIN;
BEGIN
2: DECLARE c8 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
DECLARE
2: @out_sh 'get_cell SESSION82 3 2 ; get_token_cell TOKEN82 3 1 ; match_sub_tt session82 $SESSION82 > /dev/null ; match_sub token82 $TOKEN82': SELECT token,sessionid,status FROM GP_ENDPOINTS WHERE cursorname='c8';
 token                              | sessionid | status
------------------------------------+-----------+--------
 token82 | session82| READY
 token82 | session82| READY
 token82 | session82| READY
(3 rows)
-- Session 2 can only see all cursors with gp_endpoints_info(true).
2: SELECT token,sessionid,status FROM gp_endpoints_info(true) WHERE cursorname='c8';
 token                              | sessionid | status 
------------------------------------+-----------+--------
 token81 | session81| READY  
 token81 | session81| READY  
 token81 | session81| READY  
 token82 | session82| READY  
 token82 | session82| READY  
 token82 | session82| READY  
(6 rows)

1: CLOSE c8;
CLOSE
1: END;
END
2: CLOSE c8;
CLOSE
2: END;
END

