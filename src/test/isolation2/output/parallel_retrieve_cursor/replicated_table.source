-- @Description Tests the PARALLEL RETRIEVE CURSOR for select replcated table
--
DROP TABLE IF EXISTS rt1;
DROP
CREATE TABLE rt1 (a INT) DISTRIBUTED REPLICATED;
CREATE
insert into rt1 select generate_series(1,100);
INSERT 100

--------- Test1: Basic test for PARALLEL RETRIEVE CURSOR on replicated table
1: BEGIN;
BEGIN
1: DECLARE c1 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM rt1;
DECLARE
2: BEGIN;
BEGIN
2: DECLARE c2 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM rt1;
DECLARE
3: BEGIN;
BEGIN
3: DECLARE c3 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM rt1;
DECLARE

-- Here because replicated table will execute on seg id: session_id % segment_number
-- Just declare & CHECK PARALLEL RETRIEVE CURSORs in all segment_number (i.e. 3) sessions,
-- so that there should have specific session: MOD(sessionid,3)=1;
-- Get token only in specific session id and retrieve this token.
4: @out_sh 'parse_endpoint 1 1 2 3 4': SELECT endpointname,token,hostname,port,status FROM GP_ENDPOINTS_INFO(TRUE) WHERE MOD(sessionid,3)=1;
 endpoint_id1_1 | token_id | host_id | port_id | READY
(1 row)
1&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c1');  <waiting ...>
2&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c2');  <waiting ...>
3&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c3');  <waiting ...>
*R: @in_sh 'sub_endpoint_name @ENDPOINT1': SELECT status FROM GP_ENDPOINTS_STATUS_INFO() WHERE endpointname='@ENDPOINT1';
#-1retrieve> FATAL:  Retrieve auth token is invalid


#0retrieve> FATAL:  Retrieve auth token is invalid


 status 
--------
 READY  
(1 row)

#2retrieve> FATAL:  Retrieve auth token is invalid

*R: @in_sh 'sub_endpoint_name @ENDPOINT1': RETRIEVE 10 FROM ENDPOINT "@ENDPOINT1";
#-1retrieve> FATAL:  Retrieve auth token is invalid


#0retrieve> FATAL:  Retrieve auth token is invalid


 a  
----
 1  
 2  
 3  
 4  
 5  
 6  
 7  
 8  
 9  
 10 
(10 rows)

#2retrieve> FATAL:  Retrieve auth token is invalid

-- cancel all 3 sessions
4: select pg_cancel_backend(pid) from pg_stat_activity, gp_endpoints_info(true) where sess_id = sessionid AND (cursorname ='c1' or cursorname='c2' or cursorname='c3');
 pg_cancel_backend 
-------------------
 t                 
 t                 
 t                 
(3 rows)
1<:  <... completed>
ERROR:  canceling statement due to user request
2<:  <... completed>
ERROR:  canceling statement due to user request
3<:  <... completed>
ERROR:  canceling statement due to user request

1: ROLLBACK;
ROLLBACK
2: ROLLBACK;
ROLLBACK
3: ROLLBACK;
ROLLBACK

1q: ... <quitting>
2q: ... <quitting>
3q: ... <quitting>
-1Rq: FAILED:  Sessions not started cannot be quit
1Rq: ... <quitting>
2Rq: FAILED:  Sessions not started cannot be quit
3Rq: FAILED:  Sessions not started cannot be quit

--------- Test2: Basic test for PARALLEL RETRIEVE CURSOR on replicated table
1: BEGIN;
BEGIN
1: DECLARE c1 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM rt1 ORDER BY a;
DECLARE
2: BEGIN;
BEGIN
2: DECLARE c2 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM rt1 ORDER BY a;
DECLARE
3: BEGIN;
BEGIN
3: DECLARE c3 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM rt1 ORDER BY a;
DECLARE

-- Here because replicated table will execute on seg id: session_id % segment_number
-- Just declare & CHECK PARALLEL RETRIEVE CURSORs in all segment_number (i.e. 3) sessions,
-- so that there should have specific session: MOD(sessionid,3)=1;
-- Get token only in specific session id and retrieve this token.
4: @out_sh 'parse_endpoint 2 1 2 3 4': SELECT endpointname,token,hostname,port,status FROM GP_ENDPOINTS_INFO(TRUE) WHERE MOD(sessionid,3)=1;
 endpoint_id2_1 | token_id | host_id | port_id | READY
(1 row)
1&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c1');  <waiting ...>
2&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c2');  <waiting ...>
3&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c3');  <waiting ...>
*R: @in_sh 'sub_endpoint_name @ENDPOINT2': SELECT status FROM GP_ENDPOINTS_STATUS_INFO() WHERE endpointname='@ENDPOINT2';
#-1retrieve> FATAL:  Retrieve auth token is invalid


#0retrieve> FATAL:  Retrieve auth token is invalid


 status 
--------
 READY  
(1 row)

#2retrieve> FATAL:  Retrieve auth token is invalid

*R: @in_sh 'sub_endpoint_name @ENDPOINT2': RETRIEVE 10 FROM ENDPOINT "@ENDPOINT2";
#-1retrieve> FATAL:  Retrieve auth token is invalid


#0retrieve> FATAL:  Retrieve auth token is invalid


 a  
----
 1  
 2  
 3  
 4  
 5  
 6  
 7  
 8  
 9  
 10 
(10 rows)

#2retrieve> FATAL:  Retrieve auth token is invalid

-- cancel all 3 sessions
4: select pg_cancel_backend(pid) from pg_stat_activity, gp_endpoints_info(true) where sess_id = sessionid AND (cursorname ='c1' or cursorname='c2' or cursorname='c3');
 pg_cancel_backend 
-------------------
 t                 
 t                 
 t                 
(3 rows)
1<:  <... completed>
ERROR:  canceling statement due to user request
2<:  <... completed>
ERROR:  canceling statement due to user request
3<:  <... completed>
ERROR:  canceling statement due to user request

1: ROLLBACK;
ROLLBACK
2: ROLLBACK;
ROLLBACK
3: ROLLBACK;
ROLLBACK

1q: ... <quitting>
2q: ... <quitting>
3q: ... <quitting>
-1Rq: FAILED:  Sessions not started cannot be quit
1Rq: ... <quitting>
2Rq: FAILED:  Sessions not started cannot be quit
3Rq: FAILED:  Sessions not started cannot be quit

--------- Test3: Basic test for PARALLEL RETRIEVE CURSOR on replicated table
1: BEGIN;
BEGIN
1: DECLARE c1 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM rt1 WHERE MOD(a,3)=1;
DECLARE
2: BEGIN;
BEGIN
2: DECLARE c2 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM rt1 WHERE MOD(a,3)=1;
DECLARE
3: BEGIN;
BEGIN
3: DECLARE c3 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM rt1 WHERE MOD(a,3)=1;
DECLARE

-- Here because replicated table will execute on seg id: session_id % segment_number
-- Just declare & CHECK PARALLEL RETRIEVE CURSORs in all segment_number (i.e. 3) sessions,
-- so that there should have specific session: MOD(sessionid,3)=1;
-- Get token only in specific session id and retrieve this token.
4: @out_sh 'parse_endpoint 3 1 2 3 4': SELECT endpointname,token,hostname,port,status FROM GP_ENDPOINTS_INFO(TRUE) WHERE MOD(sessionid,3)=1;
 endpoint_id3_1 | token_id | host_id | port_id | READY
(1 row)
1&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c1');  <waiting ...>
2&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c2');  <waiting ...>
3&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c3');  <waiting ...>
*R: @in_sh 'sub_endpoint_name @ENDPOINT3': SELECT status FROM GP_ENDPOINTS_STATUS_INFO() WHERE endpointname='@ENDPOINT3';
#-1retrieve> FATAL:  Retrieve auth token is invalid


#0retrieve> FATAL:  Retrieve auth token is invalid


 status 
--------
 READY  
(1 row)

#2retrieve> FATAL:  Retrieve auth token is invalid

*R: @in_sh 'sub_endpoint_name @ENDPOINT3': RETRIEVE 10 FROM ENDPOINT "@ENDPOINT3";
#-1retrieve> FATAL:  Retrieve auth token is invalid


#0retrieve> FATAL:  Retrieve auth token is invalid


 a  
----
 1  
 4  
 7  
 10 
 13 
 16 
 19 
 22 
 25 
 28 
(10 rows)

#2retrieve> FATAL:  Retrieve auth token is invalid

-- cancel all 3 sessions
4: select pg_cancel_backend(pid) from pg_stat_activity, gp_endpoints_info(true) where sess_id = sessionid AND (cursorname ='c1' or cursorname='c2' or cursorname='c3');
 pg_cancel_backend 
-------------------
 t                 
 t                 
 t                 
(3 rows)
1<:  <... completed>
ERROR:  canceling statement due to user request
2<:  <... completed>
ERROR:  canceling statement due to user request
3<:  <... completed>
ERROR:  canceling statement due to user request

1: ROLLBACK;
ROLLBACK
2: ROLLBACK;
ROLLBACK
3: ROLLBACK;
ROLLBACK

1q: ... <quitting>
2q: ... <quitting>
3q: ... <quitting>
-1Rq: FAILED:  Sessions not started cannot be quit
1Rq: ... <quitting>
2Rq: FAILED:  Sessions not started cannot be quit
3Rq: FAILED:  Sessions not started cannot be quit

--------- Test4: Basic test for PARALLEL RETRIEVE CURSOR on replicated table
1: BEGIN;
BEGIN
1: DECLARE c1 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM rt1 WHERE MOD(a,3)=1 OR MOD(a,3)=2;
DECLARE
2: BEGIN;
BEGIN
2: DECLARE c2 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM rt1 WHERE MOD(a,3)=1 OR MOD(a,3)=2;
DECLARE
3: BEGIN;
BEGIN
3: DECLARE c3 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM rt1 WHERE MOD(a,3)=1 OR MOD(a,3)=2;
DECLARE

-- Here because replicated table will execute on seg id: session_id % segment_number
-- Just declare & CHECK PARALLEL RETRIEVE CURSORs in all segment_number (i.e. 3) sessions,
-- so that there should have specific session: MOD(sessionid,3)=1;
-- Get token only in specific session id and retrieve this token.
4: @out_sh 'parse_endpoint 4 1 2 3 4': SELECT endpointname,token,hostname,port,status FROM GP_ENDPOINTS_INFO(TRUE) WHERE MOD(sessionid,3)=1;
 endpoint_id4_1 | token_id | host_id | port_id | READY
(1 row)
1&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c1');  <waiting ...>
2&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c2');  <waiting ...>
3&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c3');  <waiting ...>
*R: @in_sh 'sub_endpoint_name @ENDPOINT4': SELECT status FROM GP_ENDPOINTS_STATUS_INFO() WHERE endpointname='@ENDPOINT4';
#-1retrieve> FATAL:  Retrieve auth token is invalid


#0retrieve> FATAL:  Retrieve auth token is invalid


 status 
--------
 READY  
(1 row)

#2retrieve> FATAL:  Retrieve auth token is invalid

*R: @in_sh 'sub_endpoint_name @ENDPOINT4': RETRIEVE 10 FROM ENDPOINT "@ENDPOINT4";
#-1retrieve> FATAL:  Retrieve auth token is invalid


#0retrieve> FATAL:  Retrieve auth token is invalid


 a  
----
 1  
 2  
 4  
 5  
 7  
 8  
 10 
 11 
 13 
 14 
(10 rows)

#2retrieve> FATAL:  Retrieve auth token is invalid

-- cancel all 3 sessions
4: select pg_cancel_backend(pid) from pg_stat_activity, gp_endpoints_info(true) where sess_id = sessionid AND (cursorname ='c1' or cursorname='c2' or cursorname='c3');
 pg_cancel_backend 
-------------------
 t                 
 t                 
 t                 
(3 rows)
1<:  <... completed>
ERROR:  canceling statement due to user request
2<:  <... completed>
ERROR:  canceling statement due to user request
3<:  <... completed>
ERROR:  canceling statement due to user request

1: ROLLBACK;
ROLLBACK
2: ROLLBACK;
ROLLBACK
3: ROLLBACK;
ROLLBACK
