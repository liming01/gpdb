DROP TABLE IF EXISTS t1;
DROP
CREATE TABLE t1 (a INT);
CREATE
insert into t1 select generate_series(1,100);
INSERT 100
CREATE TABLE t2 (a INT);
CREATE
CREATE TABLE t3 (a text);
CREATE
COPY t3 FROM PROGRAM 'for i in `seq 1 10`; do echo ${i}test; done';
COPY 10
CREATE TABLE t4 (a text);
CREATE
CREATE TABLE t5 (b INT);
CREATE
INSERT INTO t5 SELECT GENERATE_SERIES(1, 10);
INSERT 10

-- Test1: close not executed parallel cursor
1: BEGIN;
BEGIN
1: DECLARE c1 PARALLEL CURSOR FOR SELECT * FROM t1;
DECLARE
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c1';
 token        | status 
--------------+--------
 token_id1 | INIT   
 token_id1 | INIT   
 token_id1 | INIT   
(3 rows)
1: CLOSE c1;
CLOSE
-- check no endpoint info
1: SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c1';
 token | status 
-------+--------
(0 rows)
-- check no token info on QE after close parallel cursor
*R:  SELECT * FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='token_id1';
 token | databaseid | senderpid | receiverpid | attached | dbid | sessionid | userid 
-------+------------+-----------+-------------+----------+------+-----------+--------
(0 rows)
 token | databaseid | senderpid | receiverpid | attached | dbid | sessionid | userid 
-------+------------+-----------+-------------+----------+------+-----------+--------
(0 rows)
 token | databaseid | senderpid | receiverpid | attached | dbid | sessionid | userid 
-------+------------+-----------+-------------+----------+------+-----------+--------
(0 rows)
 token | databaseid | senderpid | receiverpid | attached | dbid | sessionid | userid 
-------+------------+-----------+-------------+----------+------+-----------+--------
(0 rows)

-- error out for closed cursor
1: EXECUTE PARALLEL CURSOR c1;
ERROR:  cursor "c1" does not exist
1: ROLLBACK;
ROLLBACK

-- Test2: open many parallel cursors
1: BEGIN;
BEGIN
1: DECLARE c1 PARALLEL CURSOR FOR SELECT * FROM t1;
DECLARE
1: DECLARE c2 PARALLEL CURSOR FOR SELECT * FROM t1;
DECLARE
1: DECLARE c3 PARALLEL CURSOR FOR SELECT * FROM t1;
DECLARE
1: DECLARE c4 PARALLEL CURSOR FOR SELECT * FROM t1;
DECLARE
1: DECLARE c5 PARALLEL CURSOR FOR SELECT * FROM t1;
DECLARE
1: DECLARE c6 PARALLEL CURSOR FOR SELECT * FROM t1;
DECLARE
1: DECLARE c7 PARALLEL CURSOR FOR SELECT * FROM t1;
DECLARE
1: DECLARE c8 PARALLEL CURSOR FOR SELECT * FROM t1;
DECLARE
1: DECLARE c9 PARALLEL CURSOR FOR SELECT * FROM t1;
DECLARE
1: DECLARE c10 PARALLEL CURSOR FOR SELECT * FROM t1;
DECLARE
1: DECLARE c11 PARALLEL CURSOR FOR SELECT * FROM t1;
DECLARE
1: ROLLBACK;
ROLLBACK
-- check no endpoint info
1: SELECT token,status FROM GP_ENDPOINTS;
 token | status 
-------+--------
(0 rows)

-- Test3: execute non-existing parallel cursor
1: BEGIN;
BEGIN
1: DECLARE c1 PARALLEL CURSOR FOR SELECT * FROM t1;
DECLARE
1: EXECUTE PARALLEL CURSOR c2;
ERROR:  cursor "c2" does not exist
1: ROLLBACK;
ROLLBACK
-- check no endpoint info
1: SELECT token,status FROM GP_ENDPOINTS;
 token | status 
-------+--------
(0 rows)

-- Test4: execute one of parallel cursors
1: BEGIN;
BEGIN
1: DECLARE c1 PARALLEL CURSOR FOR SELECT * FROM t1;
DECLARE
1: DECLARE c2 PARALLEL CURSOR FOR SELECT * FROM t1;
DECLARE
1: DECLARE c3 PARALLEL CURSOR FOR SELECT * FROM t1;
DECLARE
1: DECLARE c4 PARALLEL CURSOR FOR SELECT * FROM t1;
DECLARE
1: DECLARE c5 PARALLEL CURSOR FOR SELECT * FROM t1;
DECLARE
1: DECLARE c6 PARALLEL CURSOR FOR SELECT * FROM t1;
DECLARE
1: DECLARE c7 PARALLEL CURSOR FOR SELECT * FROM t1;
DECLARE
1: DECLARE c8 PARALLEL CURSOR FOR SELECT * FROM t1;
DECLARE
1: DECLARE c9 PARALLEL CURSOR FOR SELECT * FROM t1;
DECLARE
1: DECLARE c10 PARALLEL CURSOR FOR SELECT * FROM t1;
DECLARE
1: DECLARE c11 PARALLEL CURSOR FOR SELECT * FROM t1;
DECLARE
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c2';
 token        | status 
--------------+--------
 token_id1 | INIT   
 token_id1 | INIT   
 token_id1 | INIT   
(3 rows)
1&: EXECUTE PARALLEL CURSOR c2;
 <waiting ...>

*R:  SELECT attached FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='token_id1';
 attached 
----------
(0 rows)
 attached 
----------
 0        
(1 row)
 attached 
----------
 0        
(1 row)
 attached 
----------
 0        
(1 row)
*R:  RETRIEVE ALL FROM "token_id1";
ERROR:  failed to attach non-existing endpoint of token token_id1 (cdbendpoint.c:874)
 a  
----
 2  
 3  
 4  
 7  
 8  
 16 
 18 
 19 
 22 
 24 
 27 
 29 
 34 
 37 
 39 
 41 
 42 
 45 
 51 
 53 
 54 
 55 
 59 
 60 
 65 
 66 
 70 
 75 
 77 
 80 
 81 
 84 
 90 
 92 
 93 
 94 
 97 
 99 
(38 rows)
 a  
----
 1  
 12 
 15 
 20 
 23 
 26 
 30 
 31 
 35 
 36 
 38 
 40 
 44 
 46 
 47 
 48 
 49 
 50 
 57 
 61 
 64 
 68 
 69 
 71 
 72 
 74 
 76 
 78 
 79 
 83 
 86 
 87 
 88 
 89 
 91 
 95 
 98 
(37 rows)
 a   
-----
 5   
 6   
 9   
 10  
 11  
 13  
 14  
 17  
 21  
 25  
 28  
 32  
 33  
 43  
 52  
 56  
 58  
 62  
 63  
 67  
 73  
 82  
 85  
 96  
 100 
(25 rows)

1<:
 <... completed>
EXECUTE
-- check no endpoint info
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c2';
 token        | status 
--------------+--------
 token_id1 | FINISH 
 token_id1 | FINISH 
 token_id1 | FINISH 
(3 rows)
1: ROLLBACK;
ROLLBACK

-- Test5: if conflict with normal cursors
1: BEGIN;
BEGIN
1: DECLARE c1 CURSOR FOR SELECT * FROM t1;
DECLARE
1: DECLARE c1 PARALLEL CURSOR FOR SELECT * FROM t1;
ERROR:  cursor "c1" already exists
-- check no endpoint info
1: SELECT token,status FROM GP_ENDPOINTS;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
1: ROLLBACK;
ROLLBACK

1: BEGIN;
BEGIN
1: DECLARE c1 CURSOR FOR SELECT * FROM t1;
DECLARE
1: DECLARE c2 PARALLEL CURSOR FOR SELECT * FROM t1;
DECLARE
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c2';
 token        | status 
--------------+--------
 token_id1 | INIT   
 token_id1 | INIT   
 token_id1 | INIT   
(3 rows)
1&: EXECUTE PARALLEL CURSOR c2;
 <waiting ...>

*R:  SELECT attached FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='token_id1';
 attached 
----------
(0 rows)
 attached 
----------
 0        
(1 row)
 attached 
----------
 0        
(1 row)
 attached 
----------
 0        
(1 row)
*R:  RETRIEVE ALL FROM "token_id1";
ERROR:  failed to attach non-existing endpoint of token token_id1 (cdbendpoint.c:874)
 a  
----
 2  
 3  
 4  
 7  
 8  
 16 
 18 
 19 
 22 
 24 
 27 
 29 
 34 
 37 
 39 
 41 
 42 
 45 
 51 
 53 
 54 
 55 
 59 
 60 
 65 
 66 
 70 
 75 
 77 
 80 
 81 
 84 
 90 
 92 
 93 
 94 
 97 
 99 
(38 rows)
 a  
----
 1  
 12 
 15 
 20 
 23 
 26 
 30 
 31 
 35 
 36 
 38 
 40 
 44 
 46 
 47 
 48 
 49 
 50 
 57 
 61 
 64 
 68 
 69 
 71 
 72 
 74 
 76 
 78 
 79 
 83 
 86 
 87 
 88 
 89 
 91 
 95 
 98 
(37 rows)
 a   
-----
 5   
 6   
 9   
 10  
 11  
 13  
 14  
 17  
 21  
 25  
 28  
 32  
 33  
 43  
 52  
 56  
 58  
 62  
 63  
 67  
 73  
 82  
 85  
 96  
 100 
(25 rows)

1<:
 <... completed>
EXECUTE
-- check no endpoint info
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c2';
 token        | status 
--------------+--------
 token_id1 | FINISH 
 token_id1 | FINISH 
 token_id1 | FINISH 
(3 rows)
1: ROLLBACK;
ROLLBACK

-- Test6: select order by limit
1: BEGIN;
BEGIN
1: DECLARE c2 PARALLEL CURSOR FOR SELECT * FROM t1 ORDER BY a LIMIT 10;
DECLARE
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c2';
 token        | status 
--------------+--------
 token_id1 | INIT   
(1 row)
1&: EXECUTE PARALLEL CURSOR c2;
 <waiting ...>

*R:  SELECT attached FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='token_id1';
 attached 
----------
 0        
(1 row)
 attached 
----------
(0 rows)
 attached 
----------
(0 rows)
 attached 
----------
(0 rows)
*R:  RETRIEVE ALL FROM "token_id1";
 a  
----
 1  
 2  
 3  
 4  
 5  
 6  
 7  
 8  
 9  
 10 
(10 rows)
ERROR:  failed to attach non-existing endpoint of token token_id1 (cdbendpoint.c:874)
ERROR:  failed to attach non-existing endpoint of token token_id1 (cdbendpoint.c:874)
ERROR:  failed to attach non-existing endpoint of token token_id1 (cdbendpoint.c:874)

1<:
 <... completed>
EXECUTE
-- check no endpoint info
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c2';
 token        | status 
--------------+--------
 token_id1 | FINISH 
(1 row)
1: ROLLBACK;
ROLLBACK

-- Test7: select order by limit 0
1: BEGIN;
BEGIN
1: DECLARE c2 PARALLEL CURSOR FOR SELECT * FROM t1 ORDER BY a LIMIT 0;
DECLARE
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c2';
 token        | status 
--------------+--------
 token_id1 | INIT   
(1 row)
1&: EXECUTE PARALLEL CURSOR c2;
 <waiting ...>

*R:  SELECT attached FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='token_id1';
 attached 
----------
 0        
(1 row)
 attached 
----------
(0 rows)
 attached 
----------
(0 rows)
 attached 
----------
(0 rows)
*R:  RETRIEVE ALL FROM "token_id1";
 a 
---
(0 rows)
ERROR:  failed to attach non-existing endpoint of token token_id1 (cdbendpoint.c:874)
ERROR:  failed to attach non-existing endpoint of token token_id1 (cdbendpoint.c:874)
ERROR:  failed to attach non-existing endpoint of token token_id1 (cdbendpoint.c:874)

1<:
 <... completed>
EXECUTE
-- check no endpoint info
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c2';
 token        | status 
--------------+--------
 token_id1 | FINISH 
(1 row)
1: ROLLBACK;
ROLLBACK

-- Test8: select empty table
1: BEGIN;
BEGIN
1: DECLARE c2 PARALLEL CURSOR FOR SELECT * FROM t2;
DECLARE
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c2';
 token        | status 
--------------+--------
 token_id1 | INIT   
 token_id1 | INIT   
 token_id1 | INIT   
(3 rows)
1&: EXECUTE PARALLEL CURSOR c2;
 <waiting ...>

*R:  SELECT attached FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='token_id1';
 attached 
----------
(0 rows)
 attached 
----------
 0        
(1 row)
 attached 
----------
 0        
(1 row)
 attached 
----------
 0        
(1 row)
*R:  RETRIEVE ALL FROM "token_id1";
ERROR:  failed to attach non-existing endpoint of token token_id1 (cdbendpoint.c:874)
 a 
---
(0 rows)
 a 
---
(0 rows)
 a 
---
(0 rows)

1<:
 <... completed>
EXECUTE
-- check no endpoint info
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c2';
 token        | status 
--------------+--------
 token_id1 | FINISH 
 token_id1 | FINISH 
 token_id1 | FINISH 
(3 rows)
1: ROLLBACK;
ROLLBACK

-- Test9: select table with text column
1: BEGIN;
BEGIN
1: DECLARE c2 PARALLEL CURSOR FOR SELECT * FROM t3;
DECLARE
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c2';
 token        | status 
--------------+--------
 token_id1 | INIT   
 token_id1 | INIT   
 token_id1 | INIT   
(3 rows)
1&: EXECUTE PARALLEL CURSOR c2;
 <waiting ...>

*R:  SELECT attached FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='token_id1';
 attached 
----------
(0 rows)
 attached 
----------
 0        
(1 row)
 attached 
----------
 0        
(1 row)
 attached 
----------
 0        
(1 row)
*R:  RETRIEVE ALL FROM "token_id1";
ERROR:  failed to attach non-existing endpoint of token token_id1 (cdbendpoint.c:874)
 a     
-------
 2test 
 3test 
 5test 
(3 rows)
 a      
--------
 4test  
 6test  
 7test  
 9test  
 10test 
(5 rows)
 a     
-------
 1test 
 8test 
(2 rows)

1<:
 <... completed>
EXECUTE
-- check no endpoint info
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c2';
 token        | status 
--------------+--------
 token_id1 | FINISH 
 token_id1 | FINISH 
 token_id1 | FINISH 
(3 rows)
1: ROLLBACK;
ROLLBACK

-- Test10: select empty table with text column
1: BEGIN;
BEGIN
1: DECLARE c2 PARALLEL CURSOR FOR SELECT * FROM t4;
DECLARE
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c2';
 token        | status 
--------------+--------
 token_id1 | INIT   
 token_id1 | INIT   
 token_id1 | INIT   
(3 rows)
1&: EXECUTE PARALLEL CURSOR c2;
 <waiting ...>

*R:  SELECT attached FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='token_id1';
 attached 
----------
(0 rows)
 attached 
----------
 0        
(1 row)
 attached 
----------
 0        
(1 row)
 attached 
----------
 0        
(1 row)
*R:  RETRIEVE ALL FROM "token_id1";
ERROR:  failed to attach non-existing endpoint of token token_id1 (cdbendpoint.c:874)
 a 
---
(0 rows)
 a 
---
(0 rows)
 a 
---
(0 rows)

1<:
 <... completed>
EXECUTE
-- check no endpoint info
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c2';
 token        | status 
--------------+--------
 token_id1 | FINISH 
 token_id1 | FINISH 
 token_id1 | FINISH 
(3 rows)
1: ROLLBACK;
ROLLBACK

-- Test11: endpoints on one segment.
1: BEGIN;
BEGIN
1: DECLARE c1 PARALLEL CURSOR FOR SELECT * FROM t1 WHERE a = 50;
DECLARE
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c1';
 token        | status 
--------------+--------
 token_id1 | INIT   
(1 row)
1&: EXECUTE PARALLEL CURSOR c1;
 <waiting ...>

1R:  SELECT attached FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='token_id1';
 attached 
----------
 0        
(1 row)
1R:  RETRIEVE ALL FROM "token_id1";
 a  
----
 50 
(1 row)

1<:
 <... completed>
EXECUTE
-- check no endpoint info
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c1';
 token        | status 
--------------+--------
 token_id1 | FINISH 
(1 row)
1: ROLLBACK;
ROLLBACK

-- Test12: parallel cursor for aggregate function: sum
1: BEGIN;
BEGIN
1: DECLARE c1 PARALLEL CURSOR FOR SELECT SUM(a) FROM t1;
DECLARE
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c1';
 token        | status 
--------------+--------
 token_id1 | INIT   
(1 row)
1&: EXECUTE PARALLEL CURSOR c1;
 <waiting ...>

-1R:  SELECT attached FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='token_id1';
 attached 
----------
 0        
(1 row)
-1R:  RETRIEVE ALL FROM "token_id1";
 sum  
------
 5050 
(1 row)

1<:
 <... completed>
EXECUTE
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c1';
 token        | status 
--------------+--------
 token_id1 | FINISH 
(1 row)
1: ROLLBACK;
ROLLBACK

-- Test13: parallel cursor for aggregate function: avg
1: BEGIN;
BEGIN
1: DECLARE c1 PARALLEL CURSOR FOR SELECT AVG(a) FROM t1;
DECLARE
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c1';
 token        | status 
--------------+--------
 token_id1 | INIT   
(1 row)
1&: EXECUTE PARALLEL CURSOR c1;
 <waiting ...>

-1R:  SELECT attached FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='token_id1';
 attached 
----------
 0        
(1 row)
-1R:  RETRIEVE ALL FROM "token_id1";
 avg                 
---------------------
 50.5000000000000000 
(1 row)

1<:
 <... completed>
EXECUTE
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c1';
 token        | status 
--------------+--------
 token_id1 | FINISH 
(1 row)
1: ROLLBACK;
ROLLBACK

-- Test14: parallel cursor for count(*)
1: BEGIN;
BEGIN
1: DECLARE c1 PARALLEL CURSOR FOR SELECT COUNT(*) FROM t1;
DECLARE
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c1';
 token        | status 
--------------+--------
 token_id1 | INIT   
(1 row)
1&: EXECUTE PARALLEL CURSOR c1;
 <waiting ...>

-1R:  SELECT attached FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='token_id1';
 attached 
----------
 0        
(1 row)
-1R:  RETRIEVE ALL FROM "token_id1";
 count 
-------
 100   
(1 row)

1<:
 <... completed>
EXECUTE
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c1';
 token        | status 
--------------+--------
 token_id1 | FINISH 
(1 row)
1: ROLLBACK;
ROLLBACK

-- Test15: parallel cursor for two tables' join;
1: BEGIN;
BEGIN
1: DECLARE c1 PARALLEL CURSOR FOR SELECT * FROM t1, t5 where t1.a = t5.b;
DECLARE
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c1';
 token        | status 
--------------+--------
 token_id1 | INIT   
 token_id1 | INIT   
 token_id1 | INIT   
(3 rows)
1&: EXECUTE PARALLEL CURSOR c1;
 <waiting ...>

*R:  RETRIEVE ALL FROM "token_id1";
ERROR:  failed to attach non-existing endpoint of token token_id1 (cdbendpoint.c:874)
 a | b 
---+---
 2 | 2 
 3 | 3 
 4 | 4 
 7 | 7 
 8 | 8 
(5 rows)
 a | b 
---+---
 1 | 1 
(1 row)
 a  | b  
----+----
 5  | 5  
 6  | 6  
 9  | 9  
 10 | 10 
(4 rows)

1<:
 <... completed>
EXECUTE
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c1';
 token        | status 
--------------+--------
 token_id1 | FINISH 
 token_id1 | FINISH 
 token_id1 | FINISH 
(3 rows)
1: ROLLBACK;
ROLLBACK

-- Test16: parallel cursor for the count of two tables' join;
1: BEGIN;
BEGIN
1: DECLARE c1 PARALLEL CURSOR FOR SELECT COUNT(*) FROM t1, t5 where t1.a = t5.b;
DECLARE
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c1';
 token        | status 
--------------+--------
 token_id1 | INIT   
(1 row)
1&: EXECUTE PARALLEL CURSOR c1;
 <waiting ...>

-1R:  RETRIEVE ALL FROM "token_id1";
 count 
-------
 10    
(1 row)

1<:
 <... completed>
EXECUTE
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c1';
 token        | status 
--------------+--------
 token_id1 | FINISH 
(1 row)
1: ROLLBACK;
ROLLBACK

-- Test17: re-execute a parallel cursor and retrieve in same sessions.
1: BEGIN;
BEGIN
1: DECLARE c1 PARALLEL CURSOR FOR SELECT * from t1;
DECLARE
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c1';
 token        | status 
--------------+--------
 token_id1 | INIT   
 token_id1 | INIT   
 token_id1 | INIT   
(3 rows)
1&: EXECUTE PARALLEL CURSOR c1;
 <waiting ...>

*R:  SELECT attached FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='token_id1';
 attached 
----------
(0 rows)
 attached 
----------
 0        
(1 row)
 attached 
----------
 0        
(1 row)
 attached 
----------
 0        
(1 row)
*R:  RETRIEVE ALL FROM "token_id1";
ERROR:  failed to attach non-existing endpoint of token token_id1 (cdbendpoint.c:881)
 a  
----
 2  
 3  
 4  
 7  
 8  
 16 
 18 
 19 
 22 
 24 
 27 
 29 
 34 
 37 
 39 
 41 
 42 
 45 
 51 
 53 
 54 
 55 
 59 
 60 
 65 
 66 
 70 
 75 
 77 
 80 
 81 
 84 
 90 
 92 
 93 
 94 
 97 
 99 
(38 rows)
 a  
----
 1  
 12 
 15 
 20 
 23 
 26 
 30 
 31 
 35 
 36 
 38 
 40 
 44 
 46 
 47 
 48 
 49 
 50 
 57 
 61 
 64 
 68 
 69 
 71 
 72 
 74 
 76 
 78 
 79 
 83 
 86 
 87 
 88 
 89 
 91 
 95 
 98 
(37 rows)
 a   
-----
 5   
 6   
 9   
 10  
 11  
 13  
 14  
 17  
 21  
 25  
 28  
 32  
 33  
 43  
 52  
 56  
 58  
 62  
 63  
 67  
 73  
 82  
 85  
 96  
 100 
(25 rows)

1<:
 <... completed>
EXECUTE
1&: EXECUTE PARALLEL CURSOR c1;
 <waiting ...>

*R:  SELECT attached FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='token_id1';
 attached 
----------
(0 rows)
 attached 
----------
 0        
(1 row)
 attached 
----------
 0        
(1 row)
 attached 
----------
 0        
(1 row)
*R:  RETRIEVE ALL FROM "token_id1";
ERROR:  failed to attach non-existing endpoint of token token_id1 (cdbendpoint.c:881)
 a  
----
 2  
 3  
 4  
 7  
 8  
 16 
 18 
 19 
 22 
 24 
 27 
 29 
 34 
 37 
 39 
 41 
 42 
 45 
 51 
 53 
 54 
 55 
 59 
 60 
 65 
 66 
 70 
 75 
 77 
 80 
 81 
 84 
 90 
 92 
 93 
 94 
 97 
 99 
(38 rows)
 a  
----
 1  
 12 
 15 
 20 
 23 
 26 
 30 
 31 
 35 
 36 
 38 
 40 
 44 
 46 
 47 
 48 
 49 
 50 
 57 
 61 
 64 
 68 
 69 
 71 
 72 
 74 
 76 
 78 
 79 
 83 
 86 
 87 
 88 
 89 
 91 
 95 
 98 
(37 rows)
 a   
-----
 5   
 6   
 9   
 10  
 11  
 13  
 14  
 17  
 21  
 25  
 28  
 32  
 33  
 43  
 52  
 56  
 58  
 62  
 63  
 67  
 73  
 82  
 85  
 96  
 100 
(25 rows)

1<:
 <... completed>
EXECUTE
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c1';
 token        | status 
--------------+--------
 token_id1 | FINISH 
 token_id1 | FINISH 
 token_id1 | FINISH 
(3 rows)
1: ROLLBACK;
ROLLBACK

-- Test18: re-execute a parallel cursor and retrieve in different sessions.
1: BEGIN;
BEGIN
1: DECLARE c1 PARALLEL CURSOR FOR SELECT * from t1;
DECLARE
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c1';
 token        | status 
--------------+--------
 token_id1 | INIT   
 token_id1 | INIT   
 token_id1 | INIT   
(3 rows)
1&: EXECUTE PARALLEL CURSOR c1;
 <waiting ...>

*R:  SELECT attached FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='token_id1';
 attached 
----------
(0 rows)
 attached 
----------
 0        
(1 row)
 attached 
----------
 0        
(1 row)
 attached 
----------
 0        
(1 row)
*R:  RETRIEVE ALL FROM "token_id1";
ERROR:  failed to attach non-existing endpoint of token token_id1 (cdbendpoint.c:881)
 a  
----
 2  
 3  
 4  
 7  
 8  
 16 
 18 
 19 
 22 
 24 
 27 
 29 
 34 
 37 
 39 
 41 
 42 
 45 
 51 
 53 
 54 
 55 
 59 
 60 
 65 
 66 
 70 
 75 
 77 
 80 
 81 
 84 
 90 
 92 
 93 
 94 
 97 
 99 
(38 rows)
 a  
----
 1  
 12 
 15 
 20 
 23 
 26 
 30 
 31 
 35 
 36 
 38 
 40 
 44 
 46 
 47 
 48 
 49 
 50 
 57 
 61 
 64 
 68 
 69 
 71 
 72 
 74 
 76 
 78 
 79 
 83 
 86 
 87 
 88 
 89 
 91 
 95 
 98 
(37 rows)
 a   
-----
 5   
 6   
 9   
 10  
 11  
 13  
 14  
 17  
 21  
 25  
 28  
 32  
 33  
 43  
 52  
 56  
 58  
 62  
 63  
 67  
 73  
 82  
 85  
 96  
 100 
(25 rows)

0Rq:
... <quitting>
1Rq:
... <quitting>
2Rq:
... <quitting>

1<:
 <... completed>
EXECUTE
1&: EXECUTE PARALLEL CURSOR c1;
 <waiting ...>

*R:  SELECT attached FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='token_id1';
 attached 
----------
(0 rows)
 attached 
----------
 0        
(1 row)
 attached 
----------
 0        
(1 row)
 attached 
----------
 0        
(1 row)
*R:  RETRIEVE ALL FROM "token_id1";
ERROR:  failed to attach non-existing endpoint of token token_id1 (cdbendpoint.c:881)
 a  
----
 2  
 3  
 4  
 7  
 8  
 16 
 18 
 19 
 22 
 24 
 27 
 29 
 34 
 37 
 39 
 41 
 42 
 45 
 51 
 53 
 54 
 55 
 59 
 60 
 65 
 66 
 70 
 75 
 77 
 80 
 81 
 84 
 90 
 92 
 93 
 94 
 97 
 99 
(38 rows)
 a  
----
 1  
 12 
 15 
 20 
 23 
 26 
 30 
 31 
 35 
 36 
 38 
 40 
 44 
 46 
 47 
 48 
 49 
 50 
 57 
 61 
 64 
 68 
 69 
 71 
 72 
 74 
 76 
 78 
 79 
 83 
 86 
 87 
 88 
 89 
 91 
 95 
 98 
(37 rows)
 a   
-----
 5   
 6   
 9   
 10  
 11  
 13  
 14  
 17  
 21  
 25  
 28  
 32  
 33  
 43  
 52  
 56  
 58  
 62  
 63  
 67  
 73  
 82  
 85  
 96  
 100 
(25 rows)

1<:
 <... completed>
EXECUTE
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c1';
 token        | status 
--------------+--------
 token_id1 | FINISH 
 token_id1 | FINISH 
 token_id1 | FINISH 
(3 rows)
1: ROLLBACK;
ROLLBACK

-- Test19: fault inject while retrieving tuples from endpoint
1: CREATE EXTENSION IF NOT EXISTS gp_inject_fault;
CREATE
1: SELECT gp_inject_fault('fetch_tuples_from_endpoint', 'reset', 2);
 gp_inject_fault 
-----------------
 t               
(1 row)
1: SELECT gp_inject_fault('fetch_tuples_from_endpoint', 'interrupt', 2);
 gp_inject_fault 
-----------------
 t               
(1 row)

1: BEGIN;
BEGIN
1: DECLARE c1 PARALLEL CURSOR FOR SELECT * from t1;
DECLARE
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c1';
 token        | status 
--------------+--------
 token_id1 | INIT   
 token_id1 | INIT   
 token_id1 | INIT   
(3 rows)
1&: EXECUTE PARALLEL CURSOR c1;
 <waiting ...>

0R:  SELECT attached FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='token_id1';
 attached 
----------
 0        
(1 row)
0R:  RETRIEVE ALL FROM "token_id1";
ERROR:  canceling statement due to user request

1<:
 <... completed>
ERROR:  canceling MPP operation  (seg0 127.0.0.1:25432 pid=401)

1R:  SELECT attached FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='token_id1';
 attached 
----------
(0 rows)
1R:  RETRIEVE ALL FROM "token_id1";
ERROR:  failed to attach non-existing endpoint of token token_id1 (cdbendpoint.c:881)

2R:  SELECT attached FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='token_id1';
 attached 
----------
(0 rows)
2R:  RETRIEVE ALL FROM "token_id1";
ERROR:  failed to attach non-existing endpoint of token token_id1 (cdbendpoint.c:881)

1<:
 <... completed>
FAILED:  Execution failed
1: ROLLBACK;
ROLLBACK
1: SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c1';
 token | status 
-------+--------
(0 rows)
1: SELECT gp_inject_fault('fetch_tuples_from_endpoint', 'reset', 2);
 gp_inject_fault 
-----------------
 t               
(1 row)

-- Test20: fault inject at the 5th time while retrieving tuples from endpoint
1: SELECT gp_inject_fault('fetch_tuples_from_endpoint', 'reset', 3);
 gp_inject_fault 
-----------------
 t               
(1 row)
1: SELECT gp_inject_fault('fetch_tuples_from_endpoint', 'interrupt', '', '', '', 5, 5, 0, 3::smallint);
 gp_inject_fault 
-----------------
 t               
(1 row)

1: BEGIN;
BEGIN
1: DECLARE c1 PARALLEL CURSOR FOR SELECT * from t1;
DECLARE
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c1';
 token        | status 
--------------+--------
 token_id1 | INIT   
 token_id1 | INIT   
 token_id1 | INIT   
(3 rows)
1&: EXECUTE PARALLEL CURSOR c1;
 <waiting ...>

1R:  SELECT attached FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='token_id1';
 attached 
----------
 0        
(1 row)
1R:  RETRIEVE ALL FROM "token_id1";
ERROR:  canceling statement due to user request

1<:
 <... completed>
ERROR:  canceling MPP operation  (seg1 127.0.0.1:25433 pid=26515)

0R:  SELECT attached FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='token_id1';
 attached 
----------
(0 rows)
0R:  RETRIEVE ALL FROM "token_id1";
ERROR:  failed to attach non-existing endpoint of token token_id1 (cdbendpoint.c:881)

2R:  SELECT attached FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='token_id1';
 attached 
----------
(0 rows)
2R:  RETRIEVE ALL FROM "token_id1";
ERROR:  failed to attach non-existing endpoint of token token_id1 (cdbendpoint.c:881)

1<:
 <... completed>
FAILED:  Execution failed
1: ROLLBACK;
ROLLBACK
1: SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c1';
 token | status 
-------+--------
(0 rows)
1: SELECT gp_inject_fault('fetch_tuples_from_endpoint', 'reset', 3);
 gp_inject_fault 
-----------------
 t               
(1 row)

-- Test21: error inject at the 5th time while retrieving tuples from endpoint
1: SELECT gp_inject_fault('fetch_tuples_from_endpoint', 'error', '', '', '', 5, 5, 0, 2::smallint);
 gp_inject_fault 
-----------------
 t               
(1 row)

1: BEGIN;
BEGIN
1: DECLARE c1 PARALLEL CURSOR FOR SELECT * from t1;
DECLARE
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c1';
 token        | status 
--------------+--------
 token_id1 | INIT   
 token_id1 | INIT   
 token_id1 | INIT   
(3 rows)
1&: EXECUTE PARALLEL CURSOR c1;
 <waiting ...>

1R:  SELECT attached FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='token_id1';
 attached 
----------
 0        
(1 row)
1R:  RETRIEVE ALL FROM "token_id1";
 a  
----
 1  
 12 
 15 
 20 
 23 
 26 
 30 
 31 
 35 
 36 
 38 
 40 
 44 
 46 
 47 
 48 
 49 
 50 
 57 
 61 
 64 
 68 
 69 
 71 
 72 
 74 
 76 
 78 
 79 
 83 
 86 
 87 
 88 
 89 
 91 
 95 
 98 
(37 rows)

0R:  SELECT attached FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='token_id1';
 attached 
----------
 0        
(1 row)
0R:  RETRIEVE ALL FROM "token_id1";
ERROR:  fault triggered, fault name:'fetch_tuples_from_endpoint' fault type:'error'

1<:
 <... completed>
ERROR:  canceling MPP operation  (seg0 127.0.0.1:25432 pid=31406)

2R:  SELECT attached FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='token_id1';
 attached 
----------
(0 rows)
2R:  RETRIEVE ALL FROM "token_id1";
ERROR:  failed to attach non-existing endpoint of token token_id1 (cdbendpoint.c:881)

1<:
 <... completed>
FAILED:  Execution failed
1: ROLLBACK;
ROLLBACK
1: SELECT gp_inject_fault('fetch_tuples_from_endpoint', 'reset', 2);
 gp_inject_fault 
-----------------
 t               
(1 row)

-- Test22: parallel cursor and savepoint
1: BEGIN;
BEGIN
1: SAVEPOINT s1;
SAVEPOINT
1: DECLARE c1 PARALLEL CURSOR FOR SELECT * from t1;
DECLARE
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c1';
 token        | status 
--------------+--------
 token_id1 | INIT   
 token_id1 | INIT   
 token_id1 | INIT   
(3 rows)
1: ROLLBACK TO s1;
ROLLBACK
1: SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c1';
 token | status 
-------+--------
(0 rows)

1: ROLLBACK;
ROLLBACK

-- Test23: parallel cursor and savepoint
1: BEGIN;
BEGIN
1: DECLARE c1 PARALLEL CURSOR FOR SELECT * from t1;
DECLARE
1: SAVEPOINT s1;
SAVEPOINT
1: CLOSE c1;
CLOSE
1: ROLLBACK TO s1;
ROLLBACK
1: SELECT * FROM pg_cursors WHERE name='c1';
 name | statement | is_holdable | is_binary | is_scrollable | is_parallel | creation_time 
------+-----------+-------------+-----------+---------------+-------------+---------------
(0 rows)
1: COMMIT;
COMMIT
