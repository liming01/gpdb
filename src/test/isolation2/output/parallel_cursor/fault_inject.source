-- @Description Tests with faut inject
--
DROP TABLE IF EXISTS t1;
DROP
CREATE TABLE t1 (a INT);
CREATE
insert into t1 select generate_series(1,100);
INSERT 100

CREATE EXTENSION IF NOT EXISTS gp_inject_fault;
CREATE

--------- Test1: fault injection end-point shared memory slot full on QE
2: SELECT gp_inject_fault('endpoint_shared_memory_slot_full', 'reset', 2);
 gp_inject_fault 
-----------------
 t               
(1 row)
2: SELECT gp_inject_fault('endpoint_shared_memory_slot_full', 'full_memory_slot', 2);
 gp_inject_fault 
-----------------
 t               
(1 row)

1: BEGIN;
BEGIN
-- should report error on seg0
1: DECLARE c1 PARALLEL CURSOR FOR SELECT * FROM t1;
ERROR:  failed to allocate endpoint (cdbendpoint.c:639)  (seg0 10.34.50.153:25432 pid=41153) (cdbendpoint.c:639)
1: ROLLBACK;
ROLLBACK
-- test same error on another session
3: BEGIN;
BEGIN
3: DECLARE c1 PARALLEL CURSOR FOR SELECT * FROM t1;
ERROR:  failed to allocate endpoint (cdbendpoint.c:639)  (seg0 10.34.50.153:25432 pid=41162) (cdbendpoint.c:639)
3: ROLLBACK;
ROLLBACK
-- reset the fault injection
2: SELECT gp_inject_fault('endpoint_shared_memory_slot_full', 'reset', 2);
 gp_inject_fault 
-----------------
 t               
(1 row)
2: SELECT gp_inject_fault('endpoint_shared_memory_slot_full', 'revert_memory_slot', 2);
 gp_inject_fault 
-----------------
 t               
(1 row)
--should work as normal
1: BEGIN;
BEGIN
1: DECLARE c1 PARALLEL CURSOR FOR SELECT * FROM t1;
DECLARE
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c1';
 token        | status 
--------------+--------
 token_id1 | INIT   
 token_id1 | INIT   
 token_id1 | INIT   
(3 rows)
1&: EXECUTE PARALLEL CURSOR c1;
 <waiting ...>

*R:  SELECT attached FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='token_id1' or token='tk0000000000';
 attached 
----------
(0 rows)
 attached 
----------
 0        
(1 row)
 attached 
----------
 0        
(1 row)
 attached 
----------
 0        
(1 row)
*R:  RETRIEVE ALL FROM "token_id1";
ERROR:  failed to attach non-existing endpoint of token token_id1 (cdbendpoint.c:949)
 a  
----
 2  
 3  
 4  
 7  
 8  
 16 
 18 
 19 
 22 
 24 
 27 
 29 
 34 
 37 
 39 
 41 
 42 
 45 
 51 
 53 
 54 
 55 
 59 
 60 
 65 
 66 
 70 
 75 
 77 
 80 
 81 
 84 
 90 
 92 
 93 
 94 
 97 
 99 
(38 rows)
 a  
----
 1  
 12 
 15 
 20 
 23 
 26 
 30 
 31 
 35 
 36 
 38 
 40 
 44 
 46 
 47 
 48 
 49 
 50 
 57 
 61 
 64 
 68 
 69 
 71 
 72 
 74 
 76 
 78 
 79 
 83 
 86 
 87 
 88 
 89 
 91 
 95 
 98 
(37 rows)
 a   
-----
 5   
 6   
 9   
 10  
 11  
 13  
 14  
 17  
 21  
 25  
 28  
 32  
 33  
 43  
 52  
 56  
 58  
 62  
 63  
 67  
 73  
 82  
 85  
 96  
 100 
(25 rows)

1<:
 <... completed>
EXECUTE
1: CLOSE c1;
CLOSE
-- check no endpoint info
1: SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c1' or cursorname = 'FAULT_INJECTION_CURSOR';
 token | status 
-------+--------
(0 rows)
-- check no token info on QE after close parallel cursor
*R:  SELECT * FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='token_id1' or token='tk0000000000';
 token | databaseid | senderpid | receiverpid | attached | dbid | sessionid | userid 
-------+------------+-----------+-------------+----------+------+-----------+--------
(0 rows)
 token | databaseid | senderpid | receiverpid | attached | dbid | sessionid | userid 
-------+------------+-----------+-------------+----------+------+-----------+--------
(0 rows)
 token | databaseid | senderpid | receiverpid | attached | dbid | sessionid | userid 
-------+------------+-----------+-------------+----------+------+-----------+--------
(0 rows)
 token | databaseid | senderpid | receiverpid | attached | dbid | sessionid | userid 
-------+------------+-----------+-------------+----------+------+-----------+--------
(0 rows)

1: ROLLBACK;
ROLLBACK

--------- Test2: fault injection end-point shared memory slot full on QD
2: SELECT gp_inject_fault('endpoint_shared_memory_slot_full', 'reset', 1);
 gp_inject_fault 
-----------------
 t               
(1 row)
2: SELECT gp_inject_fault('endpoint_shared_memory_slot_full', 'full_memory_slot', 1);
 gp_inject_fault 
-----------------
 t               
(1 row)

1: BEGIN;
BEGIN
-- should report error on QD
1: DECLARE c2 PARALLEL CURSOR FOR SELECT * FROM t1;
ERROR:  can't add a new token tk0615235783 into shared memory (cdbendpoint.c:217)
1: ROLLBACK;
ROLLBACK
-- test same error on another session
3: BEGIN;
BEGIN
3: DECLARE c2 PARALLEL CURSOR FOR SELECT * FROM t1;
ERROR:  can't add a new token tk0615252590 into shared memory (cdbendpoint.c:217)
3: ROLLBACK;
ROLLBACK
-- reset the fault injection
2: SELECT gp_inject_fault('endpoint_shared_memory_slot_full', 'reset', 1);
 gp_inject_fault 
-----------------
 t               
(1 row)
2: SELECT gp_inject_fault('endpoint_shared_memory_slot_full', 'revert_memory_slot', 1);
 gp_inject_fault 
-----------------
 t               
(1 row)
--should work as normal
1: BEGIN;
BEGIN
1: DECLARE c2 PARALLEL CURSOR FOR SELECT * FROM t1;
DECLARE
1:  SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c2';
 token        | status 
--------------+--------
 token_id2 | INIT   
 token_id2 | INIT   
 token_id2 | INIT   
(3 rows)
1&: EXECUTE PARALLEL CURSOR c2;
 <waiting ...>

*R:  SELECT attached FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='token_id2' or token='tk0000000000';
 attached 
----------
(0 rows)
 attached 
----------
 0        
(1 row)
 attached 
----------
 0        
(1 row)
 attached 
----------
 0        
(1 row)
*R:  RETRIEVE ALL FROM "token_id2";
ERROR:  failed to attach non-existing endpoint of token token_id2 (cdbendpoint.c:948)
 a  
----
 2  
 3  
 4  
 7  
 8  
 16 
 18 
 19 
 22 
 24 
 27 
 29 
 34 
 37 
 39 
 41 
 42 
 45 
 51 
 53 
 54 
 55 
 59 
 60 
 65 
 66 
 70 
 75 
 77 
 80 
 81 
 84 
 90 
 92 
 93 
 94 
 97 
 99 
(38 rows)
 a  
----
 1  
 12 
 15 
 20 
 23 
 26 
 30 
 31 
 35 
 36 
 38 
 40 
 44 
 46 
 47 
 48 
 49 
 50 
 57 
 61 
 64 
 68 
 69 
 71 
 72 
 74 
 76 
 78 
 79 
 83 
 86 
 87 
 88 
 89 
 91 
 95 
 98 
(37 rows)
 a   
-----
 5   
 6   
 9   
 10  
 11  
 13  
 14  
 17  
 21  
 25  
 28  
 32  
 33  
 43  
 52  
 56  
 58  
 62  
 63  
 67  
 73  
 82  
 85  
 96  
 100 
(25 rows)

1<:
 <... completed>
EXECUTE
1: CLOSE c2;
CLOSE
-- check no endpoint info
1: SELECT token,status FROM GP_ENDPOINTS WHERE cursorname='c2' or cursorname = 'FAULT_INJECTION_CURSOR';
 token | status 
-------+--------
(0 rows)
-- check no token info on QE after close parallel cursor
*R:  SELECT * FROM GP_ENDPOINTS_STATUS_INFO() WHERE token='token_id2' or token='tk0000000000';
 token | databaseid | senderpid | receiverpid | attached | dbid | sessionid | userid 
-------+------------+-----------+-------------+----------+------+-----------+--------
(0 rows)
 token | databaseid | senderpid | receiverpid | attached | dbid | sessionid | userid 
-------+------------+-----------+-------------+----------+------+-----------+--------
(0 rows)
 token | databaseid | senderpid | receiverpid | attached | dbid | sessionid | userid 
-------+------------+-----------+-------------+----------+------+-----------+--------
(0 rows)
 token | databaseid | senderpid | receiverpid | attached | dbid | sessionid | userid 
-------+------------+-----------+-------------+----------+------+-----------+--------
(0 rows)

1: ROLLBACK;
ROLLBACK
