-- @Description Tests the PARALLEL RETRIEVE CURSOR for select replcated table
--
DROP TABLE IF EXISTS rt1;
CREATE TABLE rt1 (a INT) DISTRIBUTED REPLICATED;
insert into rt1 select generate_series(1,100);

--------- Test1: Basic test for PARALLEL RETRIEVE CURSOR on replicated table
1: BEGIN;
1: DECLARE c1 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM rt1;
2: BEGIN;
2: DECLARE c2 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM rt1;
3: BEGIN;
3: DECLARE c3 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM rt1;

-- Here because replicated table will execute on seg id: session_id % segment_number
-- Just declare & CHECK PARALLEL RETRIEVE CURSORs in all segment_number (i.e. 3) sessions, 
-- so that there should have specific session: MOD(sessionid,3)=1;
-- Get token only in specific session id and retrieve this token.
4: @out_sh 'parse_endpoint 1 1 2 3 4': SELECT endpointname,token,hostname,port,status FROM GP_ENDPOINTS_INFO(TRUE) WHERE MOD(sessionid,3)=1;
1&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c1');
2&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c2');
3&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c3');
*R: @in_sh 'sub_endpoint_name @ENDPOINT1': SELECT status FROM GP_ENDPOINTS_STATUS_INFO() WHERE endpointname='@ENDPOINT1';
*R: @in_sh 'sub_endpoint_name @ENDPOINT1': RETRIEVE 10 FROM ENDPOINT "@ENDPOINT1";
-- cancel all 3 sessions
4: select pg_cancel_backend(pid) from pg_stat_activity, gp_endpoints_info(true) where sess_id = sessionid AND (cursorname ='c1' or cursorname='c2' or cursorname='c3');
1<:
2<:
3<:

1: ROLLBACK;
2: ROLLBACK;
3: ROLLBACK;

1q:
2q:
3q:
-1Rq:
1Rq:
2Rq:
3Rq:

--------- Test2: Basic test for PARALLEL RETRIEVE CURSOR on replicated table
1: BEGIN;
1: DECLARE c1 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM rt1 ORDER BY a;
2: BEGIN;
2: DECLARE c2 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM rt1 ORDER BY a;
3: BEGIN;
3: DECLARE c3 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM rt1 ORDER BY a;

-- Here because replicated table will execute on seg id: session_id % segment_number
-- Just declare & CHECK PARALLEL RETRIEVE CURSORs in all segment_number (i.e. 3) sessions, 
-- so that there should have specific session: MOD(sessionid,3)=1;
-- Get token only in specific session id and retrieve this token.
4: @out_sh 'parse_endpoint 2 1 2 3 4': SELECT endpointname,token,hostname,port,status FROM GP_ENDPOINTS_INFO(TRUE) WHERE MOD(sessionid,3)=1;
1&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c1');
2&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c2');
3&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c3');
*R: @in_sh 'sub_endpoint_name @ENDPOINT2': SELECT status FROM GP_ENDPOINTS_STATUS_INFO() WHERE endpointname='@ENDPOINT2';
*R: @in_sh 'sub_endpoint_name @ENDPOINT2': RETRIEVE 10 FROM ENDPOINT "@ENDPOINT2";
-- cancel all 3 sessions
4: select pg_cancel_backend(pid) from pg_stat_activity, gp_endpoints_info(true) where sess_id = sessionid AND (cursorname ='c1' or cursorname='c2' or cursorname='c3');
1<:
2<:
3<:

1: ROLLBACK;
2: ROLLBACK;
3: ROLLBACK;

1q:
2q:
3q:
-1Rq:
1Rq:
2Rq:
3Rq:

--------- Test3: Basic test for PARALLEL RETRIEVE CURSOR on replicated table
1: BEGIN;
1: DECLARE c1 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM rt1 WHERE MOD(a,3)=1;
2: BEGIN;
2: DECLARE c2 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM rt1 WHERE MOD(a,3)=1;
3: BEGIN;
3: DECLARE c3 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM rt1 WHERE MOD(a,3)=1;

-- Here because replicated table will execute on seg id: session_id % segment_number
-- Just declare & CHECK PARALLEL RETRIEVE CURSORs in all segment_number (i.e. 3) sessions, 
-- so that there should have specific session: MOD(sessionid,3)=1;
-- Get token only in specific session id and retrieve this token.
4: @out_sh 'parse_endpoint 3 1 2 3 4': SELECT endpointname,token,hostname,port,status FROM GP_ENDPOINTS_INFO(TRUE) WHERE MOD(sessionid,3)=1;
1&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c1');
2&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c2');
3&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c3');
*R: @in_sh 'sub_endpoint_name @ENDPOINT3': SELECT status FROM GP_ENDPOINTS_STATUS_INFO() WHERE endpointname='@ENDPOINT3';
*R: @in_sh 'sub_endpoint_name @ENDPOINT3': RETRIEVE 10 FROM ENDPOINT "@ENDPOINT3";
-- cancel all 3 sessions
4: select pg_cancel_backend(pid) from pg_stat_activity, gp_endpoints_info(true) where sess_id = sessionid AND (cursorname ='c1' or cursorname='c2' or cursorname='c3');
1<:
2<:
3<:

1: ROLLBACK;
2: ROLLBACK;
3: ROLLBACK;

1q:
2q:
3q:
-1Rq:
1Rq:
2Rq:
3Rq:

--------- Test4: Basic test for PARALLEL RETRIEVE CURSOR on replicated table
1: BEGIN;
1: DECLARE c1 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM rt1 WHERE MOD(a,3)=1 OR MOD(a,3)=2;
2: BEGIN;
2: DECLARE c2 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM rt1 WHERE MOD(a,3)=1 OR MOD(a,3)=2;
3: BEGIN;
3: DECLARE c3 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM rt1 WHERE MOD(a,3)=1 OR MOD(a,3)=2;

-- Here because replicated table will execute on seg id: session_id % segment_number
-- Just declare & CHECK PARALLEL RETRIEVE CURSORs in all segment_number (i.e. 3) sessions, 
-- so that there should have specific session: MOD(sessionid,3)=1;
-- Get token only in specific session id and retrieve this token.
4: @out_sh 'parse_endpoint 4 1 2 3 4': SELECT endpointname,token,hostname,port,status FROM GP_ENDPOINTS_INFO(TRUE) WHERE MOD(sessionid,3)=1;
1&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c1');
2&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c2');
3&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c3');
*R: @in_sh 'sub_endpoint_name @ENDPOINT4': SELECT status FROM GP_ENDPOINTS_STATUS_INFO() WHERE endpointname='@ENDPOINT4';
*R: @in_sh 'sub_endpoint_name @ENDPOINT4': RETRIEVE 10 FROM ENDPOINT "@ENDPOINT4";
-- cancel all 3 sessions
4: select pg_cancel_backend(pid) from pg_stat_activity, gp_endpoints_info(true) where sess_id = sessionid AND (cursorname ='c1' or cursorname='c2' or cursorname='c3');
1<:
2<:
3<:

1: ROLLBACK;
2: ROLLBACK;
3: ROLLBACK;
