DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (a INT) DISTRIBUTED by (a);
insert into t1 select generate_series(1,100);
DROP TABLE IF EXISTS t2;
CREATE TABLE t2 (a INT) DISTRIBUTED by (a);
DROP TABLE IF EXISTS t3;
CREATE TABLE t3 (a text) DISTRIBUTED by (a);
COPY t3 FROM PROGRAM 'for i in `seq 1 10`; do echo ${i}test; done';
DROP TABLE IF EXISTS t4;
CREATE TABLE t4 (a text) DISTRIBUTED by (a);
DROP TABLE IF EXISTS t5;
CREATE TABLE t5 (b INT) DISTRIBUTED by (b);
INSERT INTO t5 SELECT GENERATE_SERIES(1, 10);

-- Test1: close not executed PARALLEL RETRIEVE CURSOR
1: BEGIN;
1: DECLARE c1 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
1: @out_sh 'parse_endpoint 1 1 2 3 4': SELECT endpointname,token,hostname,port,status FROM gp_endpoints_info(true) WHERE cursorname='c1';
1: CLOSE c1;
-- check no endpoint info
1: SELECT token,status FROM gp_endpoints_info(true) WHERE cursorname='c1';
-- check no token info on QE after close PARALLEL RETRIEVE CURSOR
*R: @in_sh 'sub_endpoint_name @ENDPOINT1': SELECT status FROM GP_ENDPOINTS_STATUS_INFO() WHERE endpointname='@ENDPOINT1';

-- error out for closed cursor
1: SELECT * FROM gp_wait_parallel_retrieve_cursor('c1');
1: ROLLBACK;

-- Test2: open many PARALLEL RETRIEVE CURSORs
1: BEGIN;
1: DECLARE c1 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
1: DECLARE c2 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
1: DECLARE c3 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
1: DECLARE c4 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
1: DECLARE c5 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
1: DECLARE c6 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
1: DECLARE c7 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
1: DECLARE c8 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
1: DECLARE c9 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
1: DECLARE c10 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
1: DECLARE c11 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
1: ROLLBACK;
-- check no endpoint info
1: SELECT token,status FROM gp_endpoints_info(true);

-- Test3: execute non-existing PARALLEL RETRIEVE CURSOR
1: BEGIN;
1: DECLARE c1 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
1: SELECT * FROM gp_wait_parallel_retrieve_cursor('c2');
1: ROLLBACK;
1: BEGIN;
1: DECLARE c1 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
1: SELECT * FROM gp_check_parallel_retrieve_cursor('c2');
1: ROLLBACK;
-- check no endpoint info
1: SELECT token,status FROM gp_endpoints_info(true);

-- Test4: execute one of PARALLEL RETRIEVE CURSORs
1: BEGIN;
1: DECLARE c1 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
1: DECLARE c2 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
1: DECLARE c3 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
1: DECLARE c4 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
1: DECLARE c5 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
1: DECLARE c6 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
1: DECLARE c7 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
1: DECLARE c8 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
1: DECLARE c9 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
1: DECLARE c10 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
1: DECLARE c11 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
1: @out_sh 'parse_endpoint 2 1 2 3 4': SELECT endpointname,token,hostname,port,status FROM gp_endpoints_info(true) WHERE cursorname='c2';
-- test check and wait in normal way
1: SELECT * FROM gp_check_parallel_retrieve_cursor('c2');
1&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c2');

*R: @in_sh 'sub_endpoint_name @ENDPOINT2': SELECT status FROM GP_ENDPOINTS_STATUS_INFO() WHERE endpointname='@ENDPOINT2';
*R: @in_sh 'sub_endpoint_name @ENDPOINT2': RETRIEVE ALL FROM ENDPOINT "@ENDPOINT2";

1<:
1: SELECT * FROM gp_check_parallel_retrieve_cursor('c2');
-- check all endpoint status
1: SELECT status FROM gp_endpoints_info(true) WHERE cursorname='c2';
1: ROLLBACK;
-- check no endpoint info
1: SELECT status FROM gp_endpoints_info(true) WHERE cursorname='c2';

-- Test5: if conflict with normal cursors
1: BEGIN;
1: DECLARE c1 CURSOR FOR SELECT * FROM t1;
1: DECLARE c1 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
-- check no endpoint info
1: SELECT token,status FROM gp_endpoints_info(true);
1: ROLLBACK;

1: BEGIN;
1: DECLARE c1 CURSOR FOR SELECT * FROM t1;
1: DECLARE c2 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
1: @out_sh 'parse_endpoint 2 1 2 3 4': SELECT endpointname,token,hostname,port,status FROM gp_endpoints_info(true) WHERE cursorname='c2';
1&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c2');

*R: @in_sh 'sub_endpoint_name @ENDPOINT2': SELECT status FROM GP_ENDPOINTS_STATUS_INFO() WHERE endpointname='@ENDPOINT2';
*R: @in_sh 'sub_endpoint_name @ENDPOINT2': RETRIEVE ALL FROM ENDPOINT "@ENDPOINT2";

1<:
-- check no endpoint info
1: SELECT status FROM gp_endpoints_info(true) WHERE cursorname='c2';
1: ROLLBACK;

-- Test6: select order by limit
1: BEGIN;
1: DECLARE c2 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1 ORDER BY a LIMIT 10;
1: @out_sh 'parse_endpoint 2 1 2 3 4': SELECT endpointname,token,hostname,port,status FROM gp_endpoints_info(true) WHERE cursorname='c2';

*R: @in_sh 'sub_endpoint_name @ENDPOINT2': SELECT status FROM GP_ENDPOINTS_STATUS_INFO() WHERE endpointname='@ENDPOINT2';
*R: @in_sh 'sub_endpoint_name @ENDPOINT2': RETRIEVE ALL FROM ENDPOINT "@ENDPOINT2";

-- test check and wait after finished retrieving
1: SELECT * FROM gp_check_parallel_retrieve_cursor('c2');
1: SELECT * FROM gp_wait_parallel_retrieve_cursor('c2');
-- check no endpoint info
1: SELECT status FROM gp_endpoints_info(true) WHERE cursorname='c2';
1: ROLLBACK;

-- Test7: select order by limit 0
1: BEGIN;
1: DECLARE c2 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1 ORDER BY a LIMIT 0;
1: @out_sh 'parse_endpoint 2 1 2 3 4': SELECT endpointname,token,hostname,port,status FROM gp_endpoints_info(true) WHERE cursorname='c2';
1: SELECT * FROM gp_check_parallel_retrieve_cursor('c2');
1&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c2');

*R: @in_sh 'sub_endpoint_name @ENDPOINT2': SELECT status FROM GP_ENDPOINTS_STATUS_INFO() WHERE endpointname='@ENDPOINT2';
*R: @in_sh 'sub_endpoint_name @ENDPOINT2': RETRIEVE ALL FROM ENDPOINT "@ENDPOINT2";

1<:
1: SELECT * FROM gp_check_parallel_retrieve_cursor('c2');
-- check no endpoint info
1: SELECT status FROM gp_endpoints_info(true) WHERE cursorname='c2';
1: ROLLBACK;

-- Test8: select empty table
1: BEGIN;
1: DECLARE c2 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t2;
1: @out_sh 'parse_endpoint 2 1 2 3 4': SELECT endpointname,token,hostname,port,status FROM gp_endpoints_info(true) WHERE cursorname='c2';
1: SELECT * FROM gp_check_parallel_retrieve_cursor('c2');
1&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c2');

*R: @in_sh 'sub_endpoint_name @ENDPOINT2': SELECT status FROM GP_ENDPOINTS_STATUS_INFO() WHERE endpointname='@ENDPOINT2';
*R: @in_sh 'sub_endpoint_name @ENDPOINT2': RETRIEVE ALL FROM ENDPOINT "@ENDPOINT2";

1<:
1: SELECT * FROM gp_check_parallel_retrieve_cursor('c2');
-- check no endpoint info
1: SELECT status FROM gp_endpoints_info(true) WHERE cursorname='c2';
1: ROLLBACK;

-- Test9: select table with text column
1: BEGIN;
1: DECLARE c2 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t3;
1: @out_sh 'parse_endpoint 2 1 2 3 4': SELECT endpointname,token,hostname,port,status FROM gp_endpoints_info(true) WHERE cursorname='c2';
1: SELECT * FROM gp_check_parallel_retrieve_cursor('c2');
1&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c2');

*R: @in_sh 'sub_endpoint_name @ENDPOINT2': SELECT status FROM GP_ENDPOINTS_STATUS_INFO() WHERE endpointname='@ENDPOINT2';
*R: @in_sh 'sub_endpoint_name @ENDPOINT2': RETRIEVE ALL FROM ENDPOINT "@ENDPOINT2";

1<:
1: SELECT * FROM gp_check_parallel_retrieve_cursor('c2');
-- check no endpoint info
1: SELECT status FROM gp_endpoints_info(true) WHERE cursorname='c2';
1: ROLLBACK;

-- Test10: select empty table with text column
1: BEGIN;
1: DECLARE c2 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t4;
1: @out_sh 'parse_endpoint 2 1 2 3 4': SELECT endpointname,token,hostname,port,status FROM gp_endpoints_info(true) WHERE cursorname='c2';
1: SELECT * FROM gp_check_parallel_retrieve_cursor('c2');
1&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c2');

*R: @in_sh 'sub_endpoint_name @ENDPOINT2': SELECT status FROM GP_ENDPOINTS_STATUS_INFO() WHERE endpointname='@ENDPOINT2';
*R: @in_sh 'sub_endpoint_name @ENDPOINT2': RETRIEVE ALL FROM ENDPOINT "@ENDPOINT2";

1<:
1: SELECT * FROM gp_check_parallel_retrieve_cursor('c2');
-- check no endpoint info
1: SELECT status FROM gp_endpoints_info(true) WHERE cursorname='c2';
1: ROLLBACK;

-- Test11: endpoints on one segment.
1: BEGIN;
1: DECLARE c1 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1 WHERE a = 50;
1: @out_sh 'parse_endpoint 2 1 2 3 4': SELECT endpointname,token,hostname,port,status FROM gp_endpoints_info(true) WHERE cursorname='c1';
1: SELECT * FROM gp_check_parallel_retrieve_cursor('c1');
1&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c1');

1R: @in_sh 'sub_endpoint_name @ENDPOINT2': SELECT status FROM GP_ENDPOINTS_STATUS_INFO() WHERE endpointname='@ENDPOINT2';
1R: @in_sh 'sub_endpoint_name @ENDPOINT2': RETRIEVE ALL FROM ENDPOINT "@ENDPOINT2";

1<:
1: SELECT * FROM gp_check_parallel_retrieve_cursor('c1');
-- check no endpoint info
1: SELECT status FROM gp_endpoints_info(true) WHERE cursorname='c1';
1: ROLLBACK;

-- Test12: PARALLEL RETRIEVE CURSOR for aggregate function: sum
1: BEGIN;
1: DECLARE c1 PARALLEL RETRIEVE CURSOR FOR SELECT SUM(a) FROM t1;
1: @out_sh 'parse_endpoint 2 1 2 3 4': SELECT endpointname,token,hostname,port,status FROM gp_endpoints_info(true) WHERE cursorname='c1';
1: SELECT * FROM gp_check_parallel_retrieve_cursor('c1');
1&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c1');

-1R: @in_sh 'sub_endpoint_name @ENDPOINT2': SELECT status FROM GP_ENDPOINTS_STATUS_INFO() WHERE endpointname='@ENDPOINT2';
-1R: @in_sh 'sub_endpoint_name @ENDPOINT2': RETRIEVE ALL FROM ENDPOINT "@ENDPOINT2";

1<: 
1: SELECT * FROM gp_check_parallel_retrieve_cursor('c1');
1: SELECT status FROM gp_endpoints_info(true) WHERE cursorname='c1';
1: ROLLBACK;

-- Test13: PARALLEL RETRIEVE CURSOR for aggregate function: avg
1: BEGIN;
1: DECLARE c1 PARALLEL RETRIEVE CURSOR FOR SELECT AVG(a) FROM t1;
1: @out_sh 'parse_endpoint 2 1 2 3 4': SELECT endpointname,token,hostname,port,status FROM gp_endpoints_info(true) WHERE cursorname='c1';

-1R: @in_sh 'sub_endpoint_name @ENDPOINT2': SELECT status FROM GP_ENDPOINTS_STATUS_INFO() WHERE endpointname='@ENDPOINT2';
-1R: @in_sh 'sub_endpoint_name @ENDPOINT2': RETRIEVE ALL FROM ENDPOINT "@ENDPOINT2";

1: SELECT * FROM gp_check_parallel_retrieve_cursor('c1');
1: SELECT * FROM gp_wait_parallel_retrieve_cursor('c1');
1: SELECT status FROM gp_endpoints_info(true) WHERE cursorname='c1';
1: ROLLBACK;

-- Test14: PARALLEL RETRIEVE CURSOR for count(*)
1: BEGIN;
1: DECLARE c1 PARALLEL RETRIEVE CURSOR FOR SELECT COUNT(*) FROM t1;
1: @out_sh 'parse_endpoint 2 1 2 3 4': SELECT endpointname,token,hostname,port,status FROM gp_endpoints_info(true) WHERE cursorname='c1';
1&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c1');

-1R: @in_sh 'sub_endpoint_name @ENDPOINT2': SELECT status FROM GP_ENDPOINTS_STATUS_INFO() WHERE endpointname='@ENDPOINT2';
-1R: @in_sh 'sub_endpoint_name @ENDPOINT2': RETRIEVE ALL FROM ENDPOINT "@ENDPOINT2";

1<:
1: SELECT status FROM gp_endpoints_info(true) WHERE cursorname='c1';
1: ROLLBACK;

-- Test15: PARALLEL RETRIEVE CURSOR for two tables' join;
1: BEGIN;
1: DECLARE c1 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1, t5 where t1.a = t5.b;
1: @out_sh 'parse_endpoint 2 1 2 3 4': SELECT endpointname,token,hostname,port,status FROM gp_endpoints_info(true) WHERE cursorname='c1';
1&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c1');

*R: @in_sh 'sub_endpoint_name @ENDPOINT2': RETRIEVE ALL FROM ENDPOINT "@ENDPOINT2";

1<:
1: SELECT status FROM gp_endpoints_info(true) WHERE cursorname='c1';
1: ROLLBACK;

-- Test16: PARALLEL RETRIEVE CURSOR for the count of two tables' join;
1: BEGIN;
1: DECLARE c1 PARALLEL RETRIEVE CURSOR FOR SELECT COUNT(*) FROM t1, t5 where t1.a = t5.b;
1: @out_sh 'parse_endpoint 2 1 2 3 4': SELECT endpointname,token,hostname,port,status FROM gp_endpoints_info(true) WHERE cursorname='c1';
1&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c1');

-1R: @in_sh 'sub_endpoint_name @ENDPOINT2': RETRIEVE ALL FROM ENDPOINT "@ENDPOINT2";

1<:
1: SELECT status FROM gp_endpoints_info(true) WHERE cursorname='c1';
1: ROLLBACK;

-- Test17: re-execute a PARALLEL RETRIEVE CURSOR and retrieve in same sessions.
1: BEGIN;
1: DECLARE c1 PARALLEL RETRIEVE CURSOR FOR SELECT * from t1;
1: @out_sh 'parse_endpoint 2 1 2 3 4': SELECT endpointname,token,hostname,port,status FROM gp_endpoints_info(true) WHERE cursorname='c1';
1&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c1');

*R: @in_sh 'sub_endpoint_name @ENDPOINT2': SELECT status FROM GP_ENDPOINTS_STATUS_INFO() WHERE endpointname='@ENDPOINT2';
*R: @in_sh 'sub_endpoint_name @ENDPOINT2': RETRIEVE ALL FROM ENDPOINT "@ENDPOINT2";

1<:
1: CLOSE c1;
1: DECLARE c1 PARALLEL RETRIEVE CURSOR FOR SELECT * from t1;
1&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c1');

*R: @in_sh 'sub_endpoint_name @ENDPOINT2': SELECT status FROM GP_ENDPOINTS_STATUS_INFO() WHERE endpointname='@ENDPOINT2';
*R: @in_sh 'sub_endpoint_name @ENDPOINT2': RETRIEVE ALL FROM ENDPOINT "@ENDPOINT2";

1<:
1: SELECT status FROM gp_endpoints_info(true) WHERE cursorname='c1';
1: ROLLBACK;

-- Test18: re-execute a PARALLEL RETRIEVE CURSOR and retrieve in different sessions.
1: BEGIN;
1: DECLARE c1 PARALLEL RETRIEVE CURSOR FOR SELECT * from t1;
1: @out_sh 'parse_endpoint 2 1 2 3 4': SELECT endpointname,token,hostname,port,status FROM gp_endpoints_info(true) WHERE cursorname='c1';
1&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c1');

*R: @in_sh 'sub_endpoint_name @ENDPOINT2': SELECT status FROM GP_ENDPOINTS_STATUS_INFO() WHERE endpointname='@ENDPOINT2';
*R: @in_sh 'sub_endpoint_name @ENDPOINT2': RETRIEVE ALL FROM ENDPOINT "@ENDPOINT2";

0Rq:
1Rq:
2Rq:

1<:
1: CLOSE c1;
1: DECLARE c1 PARALLEL RETRIEVE CURSOR FOR SELECT * from t1;
1&: SELECT * FROM gp_wait_parallel_retrieve_cursor('c1');

*R: @in_sh 'sub_endpoint_name @ENDPOINT2': SELECT status FROM GP_ENDPOINTS_STATUS_INFO() WHERE endpointname='@ENDPOINT2';
*R: @in_sh 'sub_endpoint_name @ENDPOINT2': RETRIEVE ALL FROM ENDPOINT "@ENDPOINT2";

1<:
1: SELECT status FROM gp_endpoints_info(true) WHERE cursorname='c1';
1: ROLLBACK;

-- Test19: PARALLEL RETRIEVE CURSOR and savepoint
1: BEGIN;
1: SAVEPOINT s1;
1: DECLARE c1 PARALLEL RETRIEVE CURSOR FOR SELECT * from t1;
1: @out_sh 'parse_endpoint 2 1 2 3 4': SELECT endpointname,token,hostname,port,status FROM gp_endpoints_info(true) WHERE cursorname='c1';
1: ROLLBACK TO s1;
1: SELECT status FROM gp_endpoints_info(true) WHERE cursorname='c1';

1: ROLLBACK;

-- Test20: PARALLEL RETRIEVE CURSOR and savepoint
1: BEGIN;
1: DECLARE c1 PARALLEL RETRIEVE CURSOR FOR SELECT * from t1;
1: SAVEPOINT s1;
1: CLOSE c1;
1: ROLLBACK TO s1;
1: SELECT * FROM pg_cursors WHERE name='c1';
1: COMMIT;
